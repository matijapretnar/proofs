%%% Core Elf: abstract syntax, typing and operational semantics

% An Eff term is either an expression (inert, free from effects) or a
% computation (can be evaluated, may cause effects).

expr : type.
%name expr E.

comp : type.
%name comp C.

% Auxiliary types for constructing handlers

op-cases : type. % A list of operation handler cases, see below
%name op-cases OCs.

%abbrev val-case = expr -> comp.
%abbrev op-case = expr -> expr -> comp.
%name op-case OC.

% Expressions

tru : expr.                            % true
fls : expr.                            % false
zro : expr.                            % zero
suc : expr -> expr.                    % successor
unt : expr.                            % unit
fun : (expr -> comp) -> expr.          % function
ins : instance Eff -> expr.            % instance
hnd : val-case -> op-cases -> expr.    % handler

% Computations

cond : expr -> comp -> comp -> comp.   % conditional statement
zro? : expr -> comp.                   % zero test
pred : expr -> comp.                   % predecessor
absd : expr -> comp.                   % eliminator for empty type
app  : expr -> expr -> comp.           % application
val  : expr -> comp.                   % injection of values into computations
op   : expr -> operation Eff -> expr -> (expr -> comp) -> comp. % operation
let  : comp -> (expr -> comp) -> comp. % let-binding
letr : (expr -> expr -> comp) -> (expr -> comp) -> comp. % recursive function
with : expr -> comp -> comp.           % handling construct

% A handler has a "val-case" and a list of cases for handling operations, these
% are encoded with "op-cases":

op-cases/nil  : op-cases.
op-cases/cons : expr -> operation Eff -> op-case -> op-cases -> op-cases.

%%% Small step operational semantics

% The handling construct must decide how to handle an operation.
% For this purpose we define "if-then-op-case".

if-then-op-case : decide -> op-case -> op-case -> op-case -> type.

if-then-op-case/yes : if-then-op-case yes OC _  OC.
if-then-op-case/no  : if-then-op-case no  _  OC OC.

% "get-op-case" finds the handler case which applies to a given operation,
% or gives the default handler if none applies.

get-op-case : instance Eff -> operation Eff -> op-cases -> op-case -> type.

get-op-case/nil  : get-op-case I O op-cases/nil ([x] [k] op (ins I) O x ([y] app k y)).
get-op-case/cons : get-op-case I O (op-cases/cons (ins I') O' OC OCs) OC''
                    <- if-then-op-case D OC OC' OC''
                    <- get-op-case I O OCs OC'
                    <- eq-inst-op I O I' O' D.

% The small step semantics relation.

~> : comp -> comp -> type.
%infix none 40 ~>.

~>/cond-tru  : cond tru C1 _ ~> C1.
~>/cond-fls  : cond fls _ C2 ~> C2.
~>/zro?-zro  : zro? zro ~> val tru.
~>/zro?-suc  : zro? (suc _) ~> val fls.
~>/pred-zro  : pred zro ~> val zro.
~>/pred-suc  : pred (suc E) ~> val E.
~>/app       : app (fun E1) E2 ~> E1 E2.
~>/let-val   : let (val E) C2 ~> C2 E.
~>/let-op    : let (op Ei O Ep K) C2 ~> op Ei O Ep ([x] let (K x) C2).
~>/let-step  : let C1 C2 ~> let C1' C2
                <- C1 ~> C1'.
~>/letr      : letr C1 C2 ~> C2 (fun ([x] letr C1 ([f] C1 f x))).
~>/with-val  : with (hnd Cv _) (val E) ~> Cv E.
~>/with-op   : with (hnd Cv OCs) (op (ins I) O Ep K) ~> OC Ep (fun ([y] with (hnd Cv OCs) (K y)))
                <- get-op-case I O OCs OC.
~>/with-step : with E C ~> with E C'
                <- C ~> C'.

% A computation is considered "final" if it is a value or an operation.

final : comp -> dirt -> type.

final/val : final (val _) _.
final/op  : final (op (ins I) O _ _) D
             <- in-dirt-instance I O D.

%%% Types

% Expression types "ty" and computation types "dirty":

ty : type.
%name ty A.

dirty : type.
%name dirty B.

% A dirty type is a pair "A ! D" where "A" is an expression type and
% "D" is dirt (see "sig.elf").

! : ty -> dirt -> dirty.
%infix none 60 !.

% Expression type constructors:

bool  : ty.                   % the type of booleans
nat   : ty.                   % the type of natural numbers
unit  : ty.                   % the unit type
empty : ty.                   % the empty type
-->   : ty -> dirty -> ty.    % functions
inst  : region Eff -> ty.     % the type of instances of a given effect
==>   : dirty -> dirty -> ty. % the type of handlers
%infix right 50 -->.
%infix right 55 ==>.

% Each operation "O : operation E" has an associated signature, namely the
% type "A1" of its parameter and its return type "A2". The mapping from operations
% to their signature is encoded by "sig".

sig : operation Eff -> ty -> ty -> type.

% Block declarations to be used in theorems.

%block var-effect : block {eff : effect}.
%block var-instance : some {eff : effect} block {inst : instance eff}.
%block var-operation : some {eff : effect} {par : ty} {res : ty} block {op : operation eff}{_ : sig op par res}.
%block vars = (var-effect | var-instance | var-operation).

% We assume here that equality on instances and operations is decidable
% by using a "%trustme" directive.

eq-inst-op-total : {I : instance Eff} {O} {I' : instance Eff'} {O'} eq-inst-op I O I' O' D -> type.
%mode eq-inst-op-total +I +O +I' +O' -Eq.

%worlds (vars) (eq-inst-op-total _ _ _ _ _).
%trustme %total {} (eq-inst-op-total _ _ _ _ _).



%%% Subtyping judgments

% "A <t A'" means that expression type "A" is a subtype of "A'".
% "B <dt B'" means that computation type "B" is a subtype of "B'".

<t : ty -> ty -> type.
<dt : dirty -> dirty -> type.
%infix none 30 <t.
%infix none 30 <dt.

<t/bool  : bool <t bool.
<t/nat   : nat <t nat.
<t/unit  : unit <t unit.
<t/empty : empty <t empty.
<t/-->   : A --> B <t A' --> B'
            <- B <dt B'
            <- A' <t A.
<t/inst  : inst R <t inst R'
            <- R <r R'.
<t/==>   : B1 ==> B2 <t B1' ==> B2'
            <- B2 <dt B2'
            <- B1' <dt B1.
<dt/!    : A ! D <dt A' ! D'
            <- D <d D'
            <- A <t A'.

%%% Typing judgements

% "eof E A" means that expression "E" has expression type "A".
% "cof C B" means that computation "C" has computation type "B".

eof : expr -> ty -> type.
cof : comp -> dirty -> type.

% "opcof Cases B D" does the hard part of checking that
% a handler is well-typed, see definition below.

opcof : op-cases -> dirty -> dirt -> type.

% "covers D D1 D2" checks that "D" is contained in the union of "D1"
% and "D2".

covers : dirt -> dirt -> dirt -> type.

covers/empty      : covers dirt/empty _ _.
covers/cons-here  : covers (dirt/cons I O D) D1 D2
                     <- covers D D1 D2
                     <- in-dirt-instance I O D1.
covers/cons-there : covers (dirt/cons I O D) D1 D2
                     <- covers D D1 D2
                     <- in-dirt-instance I O D2.

% "add-if-singleton D R O D'" adds "I#O" to dirt "D" to obtain dirt "D'",
% provided "R" is the singleton list containing just "I". This is used for
% type checking of handlers below.

add-if-singleton : dirt -> region Eff -> operation Eff -> dirt -> type.
add-if-singleton/zero : add-if-singleton D region/empty _ D.
add-if-singleton/one  : add-if-singleton D (region/cons I region/empty) O (dirt/cons I O D).
add-if-singleton/more : add-if-singleton D (region/cons _ (region/cons _ _)) _ D.

%%% Typing rules for expressions

eof/tru : eof tru bool.
eof/fls : eof fls bool.
eof/zro : eof zro nat.
eof/suc : eof (suc E) nat
           <- eof E nat.
eof/unt : eof unt unit.
eof/fun : eof (fun E) (A --> B)
           <- ({x} eof x A -> cof (E x) B).
eof/ins : eof (ins I) (inst R)
           <- in-region I R.
eof/sub : eof E A'
           <- A <t A'
           <- eof E A.
eof/hnd : eof (hnd Cv OCs) (A ! D ==> A' ! D')
           <- covers D Dcov D'
           <- opcof OCs (A' ! D') Dcov
           <- ({x} eof x A -> cof (Cv x) (A' ! D')).

% "opcof OCs B D" checks the following things (where "OCs" is a
% list of handler cases of the form "E # O OC", where "E" is an
% expression, "O" is an operation, and "OC" is the body of the case):
% 
% 1. every "E" has an instance type
% 2. every "OC" has return type "B"
% 3. the dirt "D" is covered by those cases whose associated region is a singleton.

opcof/nil  : opcof op-cases/nil B dirt/empty.
opcof/cons : opcof (op-cases/cons E O OC OCs) B D'
              <- add-if-singleton D R O D'
              <- opcof OCs B D
              <- ({x} eof x A1 -> {k} eof k (A2 --> B) -> cof (OC x k) B)
              <- sig O A1 A2
              <- eof E (inst R). 

%%% Typing rules for computations

cof/cond : cof (cond E C1 C2) B
            <- cof C2 B
            <- cof C1 B
            <- eof E bool.
cof/zro? : cof (zro? E) (bool ! D)
            <- eof E nat.
cof/pred : cof (pred E) (nat ! D)
            <- eof E nat.
cof/absd : cof (absd E) B
            <- eof E empty.
cof/app  : cof (app E1 E2) B
            <- eof E2 A
            <- eof E1 (A --> B).
cof/val  : cof (val E) (A ! D)
            <- eof E A.
cof/op   : cof (op Ei O Ep K) (B ! D)
            <- in-dirt R O D
            <- ({x} eof x A2 -> cof (K x) (B ! D))
            <- eof Ep A1
            <- sig O A1 A2
            <- eof Ei (inst R).
cof/let  : cof (let C1 C2) (A' ! D)
            <- ({x} eof x A -> cof (C2 x) (A' ! D))
            <- cof C1 (A ! D).
cof/letr : cof (letr C1 C2) B'
            <- ({f} eof f (A --> B) -> cof (C2 f) B')
            <- ({f} {x} eof f (A --> B) -> eof x A -> cof (C1 f x) B).
cof/with : cof (with E C) B'
            <- cof C B
            <- eof E (B ==> B').
cof/sub  : cof C B'
            <- B <dt B'
            <- cof C B.
