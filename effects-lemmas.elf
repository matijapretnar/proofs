%%% Comparability of operations %%%

compare-lemma : comparable-name Eff Eff' -> comparable-name I I' -> comparable-name O O'
                 -> comparable
                    (instance/ (effect/ Eff) I # opsym/ (effect/ Eff) O)
                    (instance/ (effect/ Eff') I' # opsym/ (effect/ Eff') O') -> type.
%mode compare-lemma +Eff?Eff' +I?I' +O?O' -IO?I'O'.
 
- : compare-lemma _ comparable-name/equal comparable-name/equal comparable/equal.
 
- : compare-lemma (comparable-name/apart A) _ _ (comparable/apart (apart/effect A)).
 
- : compare-lemma _ (comparable-name/apart A) _ (comparable/apart (apart/instance A)).
 
- : compare-lemma _ _ (comparable-name/apart A) (comparable/apart (apart/opsym A)).
 
%worlds () (compare-lemma _ _ _ _).
%total {} (compare-lemma _ _ _ _).
 
 
compare : {IO : operation Eff} {I'O' : operation Eff'} comparable IO I'O' -> type.
%mode compare +IO +I'O' -Dec.
 
- : compare
     (instance/ (effect/ Eff) I # opsym/ (effect/ Eff) O)
     (instance/ (effect/ Eff') I' # opsym/ (effect/ Eff') O') Dec
     <- compare-name Eff Eff' Eff?Eff'
     <- compare-name I I' I?I'
     <- compare-name O O' O?O'
     <- compare-lemma Eff?Eff' I?I' O?O' Dec.
 
%worlds () (compare _ _ _).
%total {} (compare _ _ _).



%%% Regions %%%

<r/rest : R <r R' -> {I'} R <r (region/cons I' R') -> type. 
%mode <r/rest +R<R' +I' -R<I'R'.

- : <r/rest (<r/singleton IinR') _ (<r/singleton (in-region/there IinR')).

- : <r/rest (<r/cons IinR' R<R') _ (<r/cons (in-region/there IinR') R<I'R')
     <- <r/rest R<R' _ R<I'R'.

%worlds () (<r/rest _ _ _).
%total {R<R'} (<r/rest R<R' _ _).


<r/refl : {R} R <r R -> type.
%mode <r/refl +R -R<R.

- : <r/refl _ (<r/singleton (in-region/singleton)).

- : <r/refl (region/cons _ R) (<r/cons in-region/here R<IR)
     <- <r/refl R R<R
     <- <r/rest R<R _ R<IR.

%worlds () (<r/refl _ _).
%total {R} (<r/refl R _).


in-region/<r : in-region I R -> R <r R' -> in-region I R' -> type.
%mode in-region/<r +IinR +R<R' -IinR'.

- : in-region/<r in-region/singleton (<r/singleton IinR') IinR'.

- : in-region/<r in-region/here (<r/cons IinR' _) IinR'.

- : in-region/<r (in-region/there IinR) (<r/cons _ R<R') IinR'
     <- in-region/<r IinR R<R' IinR'.

%worlds () (in-region/<r _ _ _).
%total {IinR} (in-region/<r IinR _ _).


<r/trans : R <r R' -> R' <r R'' -> R <r R'' -> type.
%mode <r/trans +R<R' +R'>R'' -R<R''.

- : <r/trans (<r/singleton IinR') R'<R'' (<r/singleton IinR'')
     <- in-region/<r IinR' R'<R'' IinR''.
- : <r/trans (<r/cons IinR' R<R') R'<R'' (<r/cons IinR'' R<R'')
     <- <r/trans R<R' R'<R'' R<R''
     <- in-region/<r IinR' R'<R'' IinR''.

%worlds () (<r/trans _ _ _).
%total {R<R'} (<r/trans R<R' _ _).



%%% Dirt %%%

<d/rest : D <d D' -> {I'O'} D <d (dirt/cons I'O' D') -> type. 
%mode <d/rest +D<D' +I'O' -D<I'O'D'.

- : <d/rest <d/empty _ <d/empty.

- : <d/rest (<d/cons IOinD' D<D') _ (<d/cons (in-dirt/there IOinD') D<I'O'D')
     <- <d/rest D<D' _ D<I'O'D'.

%worlds () (<d/rest _ _ _).
%total {D<D'} (<d/rest D<D' _ _).


<d/refl : {D} D <d D -> type.
%mode <d/refl +D -D<D.

- : <d/refl dirt/empty <d/empty.

- : <d/refl (dirt/cons IO D) (<d/cons in-dirt/here D<IOD)
     <- <d/refl D D<D
     <- <d/rest D<D IO D<IOD.

%worlds () (<d/refl _ _).
%total {D} (<d/refl D _).


in-dirt/<d : in-dirt IO D -> D <d D' -> in-dirt IO D' -> type.
%mode in-dirt/<d +IOinD +D<D' -IOinD'.

- : in-dirt/<d in-dirt/here (<d/cons IOinD' _) IOinD'.

- : in-dirt/<d (in-dirt/there IOinD) (<d/cons _ D<D') IOinD'
     <- in-dirt/<d IOinD D<D' IOinD'.

%worlds () (in-dirt/<d _ _ _).
%total {IOinD} (in-dirt/<d IOinD _ _).


<d/trans : D <d D' -> D' <d D'' -> D <d D'' -> type.
%mode <d/trans +D<D' +D'<D'' -D<D''.

- : <d/trans <d/empty _ <d/empty.

- : <d/trans (<d/cons IOinD' D<D') D'<D'' (<d/cons IOinD'' D<D'')
     <- <d/trans D<D' D'<D'' D<D''
     <- in-dirt/<d IOinD' D'<D'' IOinD''.

%worlds () (<d/trans _ _ _).
%total {D<D'} (<d/trans D<D' _ _).


covers-rest : covers (dirt/cons _ D) D1 D2 -> covers D D1 D2 -> type.
%mode covers-rest +Cov -Cov'.

- : covers-rest (covers/cons-here _ Cov') Cov'.
- : covers-rest (covers/cons-there _ Cov') Cov'.

%worlds () (covers-rest _ _).
%total {} (covers-rest _ _).



%%% Regions & dirt %%%

in-region-in-dirt : in-region I R -> in-dirt-region R O D -> in-dirt (I # O) D -> type.
%mode in-region-in-dirt +IinR +ROinD -IOinD.

- : in-region-in-dirt in-region/singleton (in-dirt-region/singleton IOinD) IOinD.
- : in-region-in-dirt in-region/here (in-dirt-region/cons IOinD _) IOinD.
- : in-region-in-dirt (in-region/there IinR) (in-dirt-region/cons _ ROinD) IOinD
     <- in-region-in-dirt IinR ROinD IOinD.

%worlds () (in-region-in-dirt _ _ _).
%total {IinR} (in-region-in-dirt IinR _ _).


<r/in-dirt-region : R <r R' -> in-dirt-region R' O D -> in-dirt-region R O D -> type.
%mode <r/in-dirt-region +R<R' +R'OinD -ROinD.

- : <r/in-dirt-region (<r/singleton IinR') R'OinD (in-dirt-region/singleton IOinD)
     <- in-region-in-dirt IinR' R'OinD IOinD.
- : <r/in-dirt-region (<r/cons IinR' R<R') R'OinD (in-dirt-region/cons IOinD ROinD)
     <- in-region-in-dirt IinR' R'OinD IOinD
     <- <r/in-dirt-region R<R' R'OinD ROinD.

%worlds () (<r/in-dirt-region _ _ _).
%total {R<R'} (<r/in-dirt-region R<R' _ _).


in-dirt-region/<d : in-dirt-region R O D -> D <d D' -> in-dirt-region R O D' -> type.
%mode in-dirt-region/<d +ROinD +D<D' -ROinD'.

- : in-dirt-region/<d (in-dirt-region/singleton IOinD) D<D' (in-dirt-region/singleton IOinD')
     <- in-dirt/<d IOinD D<D' IOinD'.

- : in-dirt-region/<d (in-dirt-region/cons IOinD ROinD) D<D'
     (in-dirt-region/cons IOinD' ROinD')
     <- in-dirt/<d IOinD D<D' IOinD'
     <- in-dirt-region/<d ROinD D<D' ROinD'.

%worlds () (in-dirt-region/<d _ _ _).
%total {ROinD} (in-dirt-region/<d ROinD _ _).
