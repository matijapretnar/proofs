%%% Comparability of operations %%%

compare-lemma : comparable-name Eff Eff' -> comparable-name I I' -> comparable-name O O'
                 -> comparable
                    (instance/ (effect/ Eff) I # opsym/ (effect/ Eff) O)
                    (instance/ (effect/ Eff') I' # opsym/ (effect/ Eff') O') -> type.
%mode compare-lemma +Eff?Eff' +I?I' +O?O' -IO?I'O'.
 
- : compare-lemma _ comparable-name/equal comparable-name/equal comparable/equal.
 
- : compare-lemma (comparable-name/apart A) _ _ (comparable/apart (apart/effect A)).
 
- : compare-lemma _ (comparable-name/apart A) _ (comparable/apart (apart/instance A)).
 
- : compare-lemma _ _ (comparable-name/apart A) (comparable/apart (apart/opsym A)).
 
%worlds () (compare-lemma _ _ _ _).
%total {} (compare-lemma _ _ _ _).
 
 
compare : {IO : operation Eff} {I'O' : operation Eff'} comparable IO I'O' -> type.
%mode compare +IO +I'O' -Dec.
 
- : compare
     (instance/ (effect/ Eff) I # opsym/ (effect/ Eff) O)
     (instance/ (effect/ Eff') I' # opsym/ (effect/ Eff') O') Dec
     <- compare-name Eff Eff' Eff?Eff'
     <- compare-name I I' I?I'
     <- compare-name O O' O?O'
     <- compare-lemma Eff?Eff' I?I' O?O' Dec.
 
%worlds () (compare _ _ _).
%total {} (compare _ _ _).
