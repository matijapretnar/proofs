%%% Instance membership %%%

instance-expr-in-region : eof _ (ins I) (inst R) -> in-region I R -> type.
%mode instance-expr-in-region +E -IinR.

- : instance-expr-in-region (eof/ins IinR) IinR.

- : instance-expr-in-region (eof/sub E (<t/inst R<R')) IinR'
     <- instance-expr-in-region E IinR
     <- in-region/<r IinR R<R' IinR'.

- : instance-expr-in-region (eof/sub E <t/ref) IinR
     <- instance-expr-in-region E IinR.

%worlds (topen) (instance-expr-in-region _ _).
%total {E} (instance-expr-in-region E _).


% We need to use contradiction in the following lemma.

apart-not-refl : {IO} {D} apart-name X X -> in-dirt IO D -> type.
%mode apart-not-refl +IO +D +X!X -IOinD.

- : apart-not-refl IO D (apart-name/ss X!X) IOinD
     <- apart-not-refl IO D X!X IOinD.

%worlds (topen) (apart-not-refl _ _ _ _).
%total {X!X} (apart-not-refl _ _ X!X _).


unequal-instance-in-rest : in-region I (region/cons I' region/empty)
                            -> in-dirt IO (dirt/cons (I' # O') D)
                            -> apart IO (I # O') -> in-dirt IO D -> type.
%mode unequal-instance-in-rest +IinR +IOinD' +IO!I'O' -IOinD.

- : unequal-instance-in-rest _ (in-dirt/there IOinD) _ IOinD.
- : unequal-instance-in-rest _ in-dirt/here (apart/effect X!X) IOinD
     <- apart-not-refl _ _ X!X IOinD.
- : unequal-instance-in-rest _ in-dirt/here (apart/instance X!X) IOinD
     <- apart-not-refl _ _ X!X IOinD.
- : unequal-instance-in-rest _ in-dirt/here (apart/opsym X!X) IOinD
     <- apart-not-refl _ _ X!X IOinD.
- : unequal-instance-in-rest in-region/here in-dirt/here _ in-dirt/here.

%worlds () (unequal-instance-in-rest _ _ _ _).
%total {} (unequal-instance-in-rest _ _ _ _).



%%% Substitution lemma %%%

% Because we represent variable judgments by "var" instead of "eof",
% we cannot use Twelf substitution, but need to prove an explicit substitution lemma.
% To make the proof go through, we need to add an additional subtyping assumption.

val-ceof-plain : cof Sig (val E) (A ! _) -> eof Sig E A -> type.
%mode val-ceof-plain +V -E.

- : val-ceof-plain (cof/val E) E.

- : val-ceof-plain (cof/sub E (<dt/! A1<A2 _)) (eof/sub E' A1<A2)
     <- val-ceof-plain E E'.

%worlds (topen) (val-ceof-plain _ _).
%total {E} (val-ceof-plain E _).

val-ceof : scof Sig (val E) S _ -> seof Sig E S -> type.
%mode val-ceof +V -E.

- : val-ceof (scof/plain B) (seof/plain A)
     <- val-ceof-plain B A.

- : val-ceof (scof/forall S) (seof/forall S')
     <- {t} val-ceof (S t) (S' t).

%worlds (topen) (val-ceof _ _).
%total {V} (val-ceof V _).

concrete-seof : seof Sig E S -> concrete S A -> eof Sig E A -> type.
%mode concrete-seof +S +SA -A.

- : concrete-seof (seof/plain A) _ A.

- : concrete-seof (seof/forall S) (concrete/forall A SA) E
     <- concrete-seof (S A) SA E.

%worlds (open) (concrete-seof _ _ _).
%total {S} (concrete-seof S _ _).


psubst-eof   : seof Sig E' S -> ({x} pvar x S -> eof Sig (E x) A) -> eof Sig (E E') A -> type.
psubst-cof   : seof Sig E S -> ({x} pvar x S -> cof Sig (C x) B) -> cof Sig (C E) B -> type.
psubst-scof   : seof Sig E S -> ({x} pvar x S -> scof Sig (C x) S' D) -> scof Sig (C E) S' D -> type.
psubst-opcof : seof Sig E S -> ({x} pvar x S -> opcof Sig (OCs x) B Dcov)
               -> opcof Sig (OCs E) B Dcov -> type.
%mode psubst-eof +X +E -E'.
%mode psubst-cof +X +C -C'.
%mode psubst-scof +X +C -C'.
%mode psubst-opcof +X +OCs -OCs'.

- : psubst-eof _ ([x] [dx] (eof/var X)) (eof/var X).

- : psubst-eof _ ([x] [dx] (eof/pvar Y SA)) (eof/pvar Y SA).

- : psubst-eof X ([x] [dx] (eof/pvar dx SA)) E
     <- concrete-seof X SA E.

- : psubst-eof _ ([x] [dx] eof/tru) eof/tru.

- : psubst-eof _ ([x] [dx] eof/fls) eof/fls.

- : psubst-eof _ ([x] [dx] eof/zro) eof/zro.

- : psubst-eof X ([x] [dx] eof/suc (E x dx)) (eof/suc E')
     <- psubst-eof X E E'.

- : psubst-eof _ ([x] [dx] eof/unt) eof/unt.

- : psubst-eof X ([x] [dx] eof/fun (F x dx)) (eof/fun F')
     <- {y} {dy} psubst-cof X ([x] [dx] F x dx y dy) (F' y dy).

- : psubst-eof X ([x] [dx] eof/hnd (Cv x dx) (OCs x dx) Cov) (eof/hnd Cv' OCs' Cov)
     <- ({y} {dy} psubst-cof X ([x] [dx] Cv x dx y dy) (Cv' y dy))
     <- psubst-opcof X OCs OCs'.

- : psubst-eof _ ([_] [_] (eof/ins IinR)) (eof/ins IinR).

- : psubst-eof X ([x] [dx] eof/sub (E x dx) A<A') (eof/sub E' A<A')
     <- psubst-eof X E E'.


- : psubst-cof X ([x] [dx] cof/cond (E x dx) (C1 x dx) (C2 x dx)) (cof/cond E' C1' C2')
     <- psubst-eof X E E'
     <- psubst-cof X C1 C1'
     <- psubst-cof X C2 C2'.

- : psubst-cof X ([x] [dx] cof/mtch (E x dx) (C1 x dx) ([y] [dy] C2 x dx y dy)) (cof/mtch E' C1' C2')
     <- psubst-eof X E E'
     <- psubst-cof X C1 C1'
     <- {y} {dy} psubst-cof X ([x] [dx] C2 x dx y dy) (C2' y dy).

- : psubst-cof X ([x] [dx] cof/absd (E x dx)) (cof/absd E')
     <- psubst-eof X E E'.

- : psubst-cof X ([x] [dx] cof/app (E1 x dx) (E2 x dx)) (cof/app E1' E2')
     <- psubst-eof X E1 E1'
     <- psubst-eof X E2 E2'.

- : psubst-cof X ([x] [dx] cof/val (E x dx)) (cof/val E')
     <- psubst-eof X E E'.

- : psubst-cof X ([x] [dx] cof/op (Ei x dx) O (Ep x dx) ([y] [dy] K x dx y dy) IOinD)
     (cof/op Ei' O Ep' K' IOinD)
     <- psubst-eof X Ei Ei'
     <- psubst-eof X Ep Ep'
     <- {y} {dy} psubst-cof X ([x] [dx] K x dx y dy) (K' y dy).

- : psubst-cof X ([x] [dx] cof/let (C1 x dx) ([y] [dy] C2 x dx y dy)) (cof/let C1' C2')
     <- psubst-scof X C1 C1'
     <- {y} {dy} psubst-cof X ([x] [dx] C2 x dx y dy) (C2' y dy).

- : psubst-cof X
     ([x] [dx] cof/letr ([f : expr] [df : var f _] [y] [dy] C1 x dx f df y dy) ([f] [df] C2 x dx f df))
     (cof/letr C1' C2')
     <- ({y} {dy} {f : expr} {df : var f _} psubst-cof X ([x] [dx] C1 x dx y dy f df) (C1' y dy f df))
     <- ({y} {dy} psubst-cof X ([x] [dx] C2 x dx y dy) (C2' y dy)).

- : psubst-cof X ([x] [dx] cof/with (E x dx) (C x dx)) (cof/with E' C')
     <- psubst-eof X E E'
     <- psubst-cof X C C'.

- : psubst-cof X ([x] [dx] cof/sub (C x dx) B<B') (cof/sub C' B<B')
     <- psubst-cof X C C'.

- : psubst-scof X ([x] [dx] scof/plain (C x dx)) (scof/plain C')
     <- psubst-cof X C C'.

- : psubst-scof X ([x] [dx] scof/forall ([t] C x dx t)) (scof/forall C')
     <- {t} psubst-scof X ([x] [dx] C x dx t) (C' t).

- : psubst-opcof _ ([x] [dx] opcof/nil) opcof/nil.

- : psubst-opcof X ([x] [dx] opcof/cons (E x dx) O ([y] [dy] [k] [dk] K x dx y dy k dk) (OCs x dx) Add)
     (opcof/cons E' O K' OCs' Add)
     <- psubst-eof X E E'
     <- ({y} {dy} {k} {dk} psubst-cof X ([x] [dx] K x dx y dy k dk) (K' y dy k dk))
     <- psubst-opcof X OCs OCs'.

%worlds (open) (psubst-eof _ _ _) (psubst-cof _ _ _) (psubst-scof _ _ _) (psubst-opcof _ _ _).
%total {(E C C' C'')} (psubst-eof _ E _) (psubst-cof _ C _) (psubst-scof _ C' _) (psubst-opcof _ C'' _).


subst-eof   : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> eof Sig E A) -> eof Sig E A -> type.
subst-cof   : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> cof Sig C B) -> cof Sig C B -> type.
subst-scof   : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> scof Sig C S D) -> scof Sig C S D -> type.
subst-opcof : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> opcof Sig OCs B Dcov)
               -> opcof Sig OCs B Dcov -> type.
%mode subst-eof +X +A1<A2 +E -E'.
%mode subst-cof +X +A1<A2 +C -C'.
%mode subst-scof +X +A1<A2 +C -C'.
%mode subst-opcof +X +A1<A2 +OCs -OCs'.

- : subst-eof X A1<A2 ([dx] (eof/var dx)) (eof/sub X A1<A2).

- : subst-eof _ _ ([dx] (eof/var  Y   )) (eof/var  Y).

- : subst-eof _ _ ([dx] (eof/pvar Y SA)) (eof/pvar Y SA).

- : subst-eof _ _ ([dx] eof/tru) eof/tru.

- : subst-eof _ _ ([dx] eof/fls) eof/fls.

- : subst-eof _ _ ([dx] eof/zro) eof/zro.

- : subst-eof X A1<A2 ([dx] eof/suc (E dx)) (eof/suc E')
     <- subst-eof X A1<A2 E E'.

- : subst-eof _ _ ([dx] eof/unt) eof/unt.

- : subst-eof X A1<A2 ([dx] eof/fun (F dx)) (eof/fun F')
     <- {y} {dy} subst-cof X A1<A2 ([dx] F dx y dy) (F' y dy).

- : subst-eof X A1<A2 ([dx] eof/hnd (Cv dx) (OCs dx) Cov) (eof/hnd Cv' OCs' Cov)
     <- ({y} {dy} subst-cof X A1<A2 ([dx] Cv dx y dy) (Cv' y dy))
     <- subst-opcof X A1<A2 OCs OCs'.

- : subst-eof _ _ ([_] eof/ins IinR) (eof/ins IinR).

- : subst-eof X A1<A2 ([dx] eof/sub (E dx) A<A') (eof/sub E' A<A')
     <- subst-eof X A1<A2 E E'.


- : subst-cof X A1<A2 ([dx] cof/cond (E dx) (C1 dx) (C2 dx)) (cof/cond E' C1' C2')
     <- subst-eof X A1<A2 E E'
     <- subst-cof X A1<A2 C1 C1'
     <- subst-cof X A1<A2 C2 C2'.

- : subst-cof X A1<A2 ([dx] cof/mtch (E dx) (C1 dx) ([y] [dy] C2 dx y dy)) (cof/mtch E' C1' C2')
     <- subst-eof X A1<A2 E E'
     <- subst-cof X A1<A2 C1 C1'
     <- {y} {dy} subst-cof X A1<A2 ([dx] C2 dx y dy) (C2' y dy).

- : subst-cof X A1<A2 ([dx] cof/absd (E dx)) (cof/absd E')
     <- subst-eof X A1<A2 E E'.

- : subst-cof X A1<A2 ([dx] cof/app (E1 dx) (E2 dx)) (cof/app E1' E2')
     <- subst-eof X A1<A2 E1 E1'
     <- subst-eof X A1<A2 E2 E2'.

- : subst-cof X A1<A2 ([dx] cof/val (E dx)) (cof/val E')
     <- subst-eof X A1<A2 E E'.

- : subst-cof X A1<A2 ([dx] cof/op (Ei dx) O (Ep dx) ([y] [dy] K dx y dy) ROinD)
     (cof/op Ei' O Ep' K' ROinD)
     <- subst-eof X A1<A2 Ei Ei'
     <- subst-eof X A1<A2 Ep Ep'
     <- {y} {dy} subst-cof X A1<A2 ([dx] K dx y dy) (K' y dy).

- : subst-cof X A1<A2 ([dx] cof/let (C1 dx) ([y] [dy] C2 dx y dy)) (cof/let C1' C2')
     <- subst-scof X A1<A2 C1 C1'
     <- {y} {dy} subst-cof X A1<A2 ([dx] C2 dx y dy) (C2' y dy).

- : subst-cof X A1<A2
     ([dx] cof/letr ([f : expr] [df : var f _] [y] [dy] C1 dx f df y dy) ([f] [df] C2 dx f df))
     (cof/letr C1' C2')
     <- ({y} {dy} {f : expr} {df : var f _} subst-cof X A1<A2 ([dx] C1 dx y dy f df) (C1' y dy f df))
     <- ({y} {dy} subst-cof X A1<A2 ([dx] C2 dx y dy) (C2' y dy)).

- : subst-cof X A1<A2 ([dx] cof/with (E dx) (C dx)) (cof/with E' C')
     <- subst-eof X A1<A2 E E'
     <- subst-cof X A1<A2 C C'.

- : subst-cof X A1<A2 ([dx] cof/sub (C dx) B<B') (cof/sub C' B<B')
     <- subst-cof X A1<A2 C C'.

- : subst-scof X A1<A2 ([dx] scof/plain (C dx)) (scof/plain C')
     <- subst-cof X A1<A2 C C'.

- : subst-scof X A1<A2 ([dx] scof/forall ([t] C dx t)) (scof/forall C')
     <- {t} subst-scof X A1<A2 ([dx] C dx t) (C' t).

- : subst-opcof _ _ ([dx] opcof/nil) opcof/nil.

- : subst-opcof X A1<A2 ([dx] opcof/cons (E dx) O ([y] [dy] [k] [dk] K dx y dy k dk) (OCs dx) Add)
     (opcof/cons E' O K' OCs' Add)
     <- subst-eof X A1<A2 E E'
     <- ({y} {dy} {k} {dk} subst-cof X A1<A2 ([dx] K dx y dy k dk) (K' y dy k dk))
     <- subst-opcof X A1<A2 OCs OCs'.

%worlds (open) (subst-eof _ _ _ _) (subst-cof _ _ _ _) (subst-scof _ _ _ _) (subst-opcof _ _ _ _).
%total {(E C C' C'')} (subst-eof _ _ E _) (subst-cof _ _ C _) (subst-scof _ _ C' _) (subst-opcof _ _ C'' _).


% Two frequently used instances of the substitution lemma

subst : ({x} var x A -> cof Sig (C x) B) -> eof Sig E A -> cof Sig (C E) B -> type.
%mode subst +C +X -C'.

- : subst C (X : eof Sig E A) C'
     <- <t/refl A A<A
     <- subst-cof X A<A (C E) C'.

%worlds (topen) (subst _ _ _).
%total {} (subst _ _ _).


subst2 : ({x1} var x1 A1 -> {x2} var x2 A2 -> cof Sig (C x1 x2) B)
          -> eof Sig E1 A1 -> eof Sig E2 A2 -> cof Sig (C E1 E2) B -> type.
%mode subst2 +C +X1 +X2 -C'.

- : subst2 C (X1 : eof Sig E1 A1) (X2 : eof Sig E2 A2) C''
     <- <t/refl A2 A2<A2
     <- ({x1} {dx1 : var x1 A1} subst-cof X2 A2<A2 (C x1 dx1 E2) (C' x1 dx1))
     <- <t/refl A1 A1<A1
     <- subst-cof X1 A1<A1 (C' E1) C''.

%worlds (topen) (subst2 _ _ _ _).
%total {} (subst2 _ _ _ _).

