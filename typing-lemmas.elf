%%% Substitution lemma %%%

% Because we represent variable judgments by "var" instead of "eof",
% we cannot use Twelf substitution, but need to prove an explicit substitution lemma.
% To make the proof go through, we need to add an additional subtyping assumption.

subst-eof   : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> eof Sig E A) -> eof Sig E A -> type.
subst-cof   : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> cof Sig C B) -> cof Sig C B -> type.
subst-scof   : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> scof Sig C S) -> scof Sig C S -> type.
subst-opcof : eof Sig E' A1 -> A1 <t A2 -> (var E' A2 -> opcof Sig OCs B)
               -> opcof Sig OCs B -> type.
%mode subst-eof +X +A1<A2 +E -E'.
%mode subst-cof +X +A1<A2 +C -C'.
%mode subst-scof +X +A1<A2 +C -C'.
%mode subst-opcof +X +A1<A2 +OCs -OCs'.

- : subst-eof X A1<A2 ([dx] (eof/var dx)) (eof/sub X A1<A2).

- : subst-eof _ _ ([dx] (eof/var  Y   )) (eof/var  Y).

- : subst-eof _ _ ([dx] (eof/pvar Y SA)) (eof/pvar Y SA).

- : subst-eof _ _ ([dx] eof/tru) eof/tru.

- : subst-eof _ _ ([dx] eof/fls) eof/fls.

- : subst-eof _ _ ([dx] eof/zro) eof/zro.

- : subst-eof X A1<A2 ([dx] eof/suc (E dx)) (eof/suc E')
     <- subst-eof X A1<A2 E E'.

- : subst-eof _ _ ([dx] eof/unt) eof/unt.

- : subst-eof X A1<A2 ([dx] eof/fun (F dx)) (eof/fun F')
     <- {y} {dy} subst-cof X A1<A2 ([dx] F dx y dy) (F' y dy).

- : subst-eof X A1<A2 ([dx] eof/hnd (Cv dx) (OCs dx)) (eof/hnd Cv' OCs')
     <- ({y} {dy} subst-cof X A1<A2 ([dx] Cv dx y dy) (Cv' y dy))
     <- subst-opcof X A1<A2 OCs OCs'.

- : subst-eof _ _ ([dx] eof/ins) eof/ins.

- : subst-eof X A1<A2 ([dx] eof/sub (E dx) A<A') (eof/sub E' A<A')
     <- subst-eof X A1<A2 E E'.


- : subst-cof X A1<A2 ([dx] cof/cond (E dx) (C1 dx) (C2 dx)) (cof/cond E' C1' C2')
     <- subst-eof X A1<A2 E E'
     <- subst-cof X A1<A2 C1 C1'
     <- subst-cof X A1<A2 C2 C2'.

- : subst-cof X A1<A2 ([dx] cof/mtch (E dx) (C1 dx) ([y] [dy] C2 dx y dy)) (cof/mtch E' C1' C2')
     <- subst-eof X A1<A2 E E'
     <- subst-cof X A1<A2 C1 C1'
     <- {y} {dy} subst-cof X A1<A2 ([dx] C2 dx y dy) (C2' y dy).

- : subst-cof X A1<A2 ([dx] cof/absd (E dx)) (cof/absd E')
     <- subst-eof X A1<A2 E E'.

- : subst-cof X A1<A2 ([dx] cof/app (E1 dx) (E2 dx)) (cof/app E1' E2')
     <- subst-eof X A1<A2 E1 E1'
     <- subst-eof X A1<A2 E2 E2'.

- : subst-cof X A1<A2 ([dx] cof/val (E dx)) (cof/val E')
     <- subst-eof X A1<A2 E E'.

- : subst-cof X A1<A2 ([dx] cof/op (Ei dx) O (Ep dx) ([y] [dy] K dx y dy))
     (cof/op Ei' O Ep' K')
     <- subst-eof X A1<A2 Ei Ei'
     <- subst-eof X A1<A2 Ep Ep'
     <- {y} {dy} subst-cof X A1<A2 ([dx] K dx y dy) (K' y dy).

- : subst-cof X A1<A2 ([dx] cof/let (C1 dx) ([y] [dy] C2 dx y dy)) (cof/let C1' C2')
     <- subst-scof X A1<A2 C1 C1'
     <- {y} {dy} subst-cof X A1<A2 ([dx] C2 dx y dy) (C2' y dy).

- : subst-cof X A1<A2
     ([dx] cof/letr ([f : expr] [df : var f _] [y] [dy] C1 dx f df y dy) ([f] [df] C2 dx f df))
     (cof/letr C1' C2')
     <- ({y} {dy} {f : expr} {df : var f _} subst-cof X A1<A2 ([dx] C1 dx y dy f df) (C1' y dy f df))
     <- ({y} {dy} subst-cof X A1<A2 ([dx] C2 dx y dy) (C2' y dy)).

- : subst-cof X A1<A2 ([dx] cof/with (E dx) (C dx)) (cof/with E' C')
     <- subst-eof X A1<A2 E E'
     <- subst-cof X A1<A2 C C'.

- : subst-cof X A1<A2 ([dx] cof/sub (C dx) B<B') (cof/sub C' B<B')
     <- subst-cof X A1<A2 C C'.

- : subst-scof X A1<A2 ([dx] scof/plain (C dx)) (scof/plain C')
     <- subst-cof X A1<A2 C C'.

- : subst-scof X A1<A2 ([dx] scof/forall ([t] C dx t)) (scof/forall C')
     <- {t} subst-scof X A1<A2 ([dx] C dx t) (C' t).

- : subst-opcof _ _ ([dx] opcof/nil) opcof/nil.

- : subst-opcof X A1<A2 ([dx] opcof/cons (E dx) O ([y] [dy] [k] [dk] K dx y dy k dk) (OCs dx))
     (opcof/cons E' O K' OCs')
     <- subst-eof X A1<A2 E E'
     <- ({y} {dy} {k} {dk} subst-cof X A1<A2 ([dx] K dx y dy k dk) (K' y dy k dk))
     <- subst-opcof X A1<A2 OCs OCs'.

%worlds (open) (subst-eof _ _ _ _) (subst-cof _ _ _ _) (subst-scof _ _ _ _) (subst-opcof _ _ _ _).
%total {(E C C' C'')} (subst-eof _ _ E _) (subst-cof _ _ C _) (subst-scof _ _ C' _) (subst-opcof _ _ C'' _).


% Two frequently used instances of the substitution lemma

subst : ({x} var x A -> cof Sig (C x) B) -> eof Sig E A -> cof Sig (C E) B -> type.
%mode subst +C +X -C'.

- : subst C (X : eof Sig E A) C'
     <- <t/refl A A<A
     <- subst-cof X A<A (C E) C'.

%worlds (topen) (subst _ _ _).
%total {} (subst _ _ _).


subst2 : ({x1} var x1 A1 -> {x2} var x2 A2 -> cof Sig (C x1 x2) B)
          -> eof Sig E1 A1 -> eof Sig E2 A2 -> cof Sig (C E1 E2) B -> type.
%mode subst2 +C +X1 +X2 -C'.

- : subst2 C (X1 : eof Sig E1 A1) (X2 : eof Sig E2 A2) C''
     <- <t/refl A2 A2<A2
     <- ({x1} {dx1 : var x1 A1} subst-cof X2 A2<A2 (C x1 dx1 E2) (C' x1 dx1))
     <- <t/refl A1 A1<A1
     <- subst-cof X1 A1<A1 (C' E1) C''.

%worlds (topen) (subst2 _ _ _ _).
%total {} (subst2 _ _ _ _).

