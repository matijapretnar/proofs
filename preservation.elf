if-then-typd : {E} {K} if-then-op-case D Cop Cop' Cop'' ->
               cof (Cop E K) B ->
               cof (Cop' E K) B ->
               cof (Cop'' E K) B ->
               type.
%mode if-then-typd +E +K +D +HC +HC' -HC''.

- : if-then-typd _ _ if-then-op-case/yes Cop _ Cop.
- : if-then-typd _ _ if-then-op-case/no _ Cop Cop.

%worlds (vars) (if-then-typd _ _ _ _ _ _).
%total {} (if-then-typd _ _ _ _ _ _).

%%% Preservation

preservation-cond : eof E bool -> cof C1 C -> cof C2 C -> step (cond E C1 C2) C' -> cof C' C -> type.
%mode preservation-cond +E +C1 +C2 +S -C'.

- : preservation-cond eof/tru C1 _ step/cond-tru C1.

- : preservation-cond eof/fls _ C2 step/cond-fls C2.

- : preservation-cond (eof/sub E _) C1 C2 S C'
     <- preservation-cond E C1 C2 S C'.

%worlds (vars) (preservation-cond _ _ _ _ _).
%total {E} (preservation-cond E _ _ _ _).


preservation-zro? : {D} eof E nat -> step (zro? E) C' -> cof C' (bool ! D) -> type.
%mode preservation-zro? +D +E +S -C'.

- : preservation-zro? _ eof/zro step/zro?-zro (cof/val eof/tru).

- : preservation-zro? _ (eof/suc _) step/zro?-suc (cof/val eof/fls).

- : preservation-zro? D (eof/sub E _) S C'
     <- preservation-zro? D E S C'.

%worlds (vars) (preservation-zro? _ _ _ _).
%total {E} (preservation-zro? _ E _ _).


preservation-pred : {D} eof E nat -> step (pred E) C' -> cof C' (nat ! D) -> type.
%mode preservation-pred +D +E +S -C'.

- : preservation-pred _ eof/zro step/pred-zro (cof/val eof/zro).

- : preservation-pred _ (eof/suc E) step/pred-suc (cof/val E).

- : preservation-pred D (eof/sub E _) S C'
     <- preservation-pred D E S C'.

%worlds (vars) (preservation-pred _ _ _ _).
%total {E} (preservation-pred _ E _ _).


preservation-app : eof E1 (A --> B) -> eof E2 A -> step (app E1 E2) C -> cof C B -> type.
%mode preservation-app +E1 +E2 +S -C.

- : preservation-app (eof/fun E1) E2 step/app (E1 _ E2).

- : preservation-app (eof/sub E1 (<t/--> A'<A B<B')) E2 S (cof/sub C B<B')
     <- preservation-app E1 (eof/sub E2 A'<A) S C.

%worlds (vars) (preservation-app _ _ _ _).
%total {E1} (preservation-app E1 _ _ _).


preservation-let-val : cof (val E) (A ! D) -> D <d D' -> ({x} eof x A -> cof (C x) (B ! D')) -> cof (C E) (B ! D') -> type.
%mode preservation-let-val +E +D<D' +C -B.

- : preservation-let-val (cof/val E) _ C (C _ E).

- : preservation-let-val (cof/sub E (<dt/! AA' D<D')) D'<D'' C B
     <- <d/trans D<D' D'<D'' D<D''
     <- preservation-let-val E D<D'' ([x] [e] (C x (eof/sub e AA'))) B.

%worlds (vars) (preservation-let-val _ _ _ _).
%total {E} (preservation-let-val E _ _ _).

preservation-let-op : cof (op Ei O Ep K) (A ! D) -> D <d D' -> ({x} eof x A -> cof (C x) (B ! D')) -> cof (op Ei O Ep ([x'] let (K x') C)) (B ! D') -> type.
%mode preservation-let-op +E +D<D' +C -B.

- : preservation-let-op (cof/op Ei O Ep K ROinD) D<D' C (cof/op Ei O Ep ([x'] [e'] (cof/let (cof/sub (K x' e') (<dt/! A<A D<D')) C)) ROinD')
     <- <d/in-dirt ROinD D<D' ROinD'
     <- <t/refl A A<A.

- : preservation-let-op (cof/sub E (<dt/! AA' D<D')) D'<D'' C B
     <- <d/trans D<D' D'<D'' D<D''
     <- preservation-let-op E D<D'' ([x] [e] (C x (eof/sub e AA'))) B.

%worlds (vars) (preservation-let-op _ _ _ _).
%total {E} (preservation-let-op E _ _ _).


preservation-with-val : cof (val E) (A ! D) -> A <t A' -> D <d D' -> eof (hnd Cv Cops) (A' ! D' ==> A'' ! D'') -> cof (Cv E) (A'' ! D'') -> type.
%mode preservation-with-val +E +AA' +DD' +C -C'.

- : preservation-with-val (cof/val E) AA' _ (eof/hnd Cv _ _) (Cv _ (eof/sub E AA')).

- : preservation-with-val (cof/sub E (<dt/! A<A' D<D')) A'<A'' D'<D'' C B
     <- <d/trans D<D' D'<D'' D<D''
     <- <t/trans A<A' A'<A'' A<A''
     <- preservation-with-val E A<A'' D<D'' C B.

- : preservation-with-val E A<A' D<D' (eof/sub C (<t/==> (<dt/! A'<A'' D'<D'') L2)) (cof/sub B L2)
     <- <d/trans D<D' D'<D'' D<D''
     <- <t/trans A<A' A'<A'' A<A''
     <- preservation-with-val E A<A'' D<D'' C B.

%worlds (vars) (preservation-with-val _ _ _ _ _).
%total {E C} (preservation-with-val E _ _ C _).


instance-expr-in-region : eof (ins I) (inst R) -> in-region I R -> type.
%mode instance-expr-in-region +E -IinR.

- : instance-expr-in-region (eof/ins IinR) IinR.

- : instance-expr-in-region (eof/sub E (<t/inst R<R')) IinR'
    <- instance-expr-in-region E IinR
    <- <r/in-region IinR R<R' IinR'.

%worlds (vars) (instance-expr-in-region _ _).
%total {E} (instance-expr-in-region E _).

covers-rest : covers (dirt/cons _ _ D) D1 D2 -> covers D D1 D2 -> type.
%mode covers-rest +Covers -Covers'.

- : covers-rest (covers/cons-here _ Covers') Covers'.
- : covers-rest (covers/cons-there _ Covers') Covers'.

%worlds (vars) (covers-rest _ _).
%total {} (covers-rest _ _).

big-lemma-handled :
            in-dirt-instance I O Dcov ->
            sig O A1 A2 ->
            eof Ep A1 ->
            eof K (A2 --> B) ->
            get-op-case I O Cops Cop ->
            opcof Cops B Dcov ->
            cof (Cop Ep K) B ->
            type.
%mode big-lemma-handled +IOinD +O +Ep +K +Get +Cops -Cop.

- : big-lemma-handled in-dirt-instance/here O Ep K
        (get-op-case/cons eq-inst-op/yes _ if-then-op-case/yes)
        (opcof/cons I O Cop Cops add-if-singleton/one)
        (Cop _ Ep _ K).

- : big-lemma-handled (in-dirt-instance/there IOinD) O Ep K
        (get-op-case/cons Eq GetRest ITE)
        (opcof/cons I' O' Cop' Cops add-if-singleton/one)
        Cop
        <- big-lemma-handled IOinD O Ep K GetRest Cops Cop''
        <- if-then-typd Epp Kk ITE (Cop' Epp Ep Kk K) Cop'' Cop.

- : big-lemma-handled IOinD O Ep K
        (get-op-case/cons Eq GetRest ITE)
        (opcof/cons I' O' Cop' Cops _)
        Cop
        <- big-lemma-handled IOinD O Ep K GetRest Cops Cop''
        <- if-then-typd Epp Kk ITE (Cop' Epp Ep Kk K) Cop'' Cop.

%worlds (vars) (big-lemma-handled _ _ _ _ _ _ _).
%total {Get} (big-lemma-handled _ _ _ _ Get _ _).

instance-in-itself : {I} in-region I (region/cons I region/empty) -> type.
%mode instance-in-itself +I -IinI.

- : instance-in-itself I in-region/here.

%worlds (vars) (instance-in-itself _ _).
%total {} (instance-in-itself _ _).

singleton-in-dirt : in-dirt-instance I O D -> in-dirt (region/cons I region/empty) O D -> type.
%mode singleton-in-dirt +IOinD -IOinD'.

- : singleton-in-dirt IOinD (in-dirt/cons IOinD in-dirt/empty).

%worlds (vars) (singleton-in-dirt _ _).
%total {} (singleton-in-dirt _ _).

big-lemma-unhandled :
            in-dirt-instance I O D' ->
            sig O A1 A2 ->
            eof Ep A1 ->
            eof K (A2 --> A' ! D') ->
            get-op-case I O Cops Cop ->
            opcof Cops (A' ! D') _ ->
            cof (Cop Ep K) (A' ! D') ->
            type.
%mode big-lemma-unhandled +IOinD +O +Ep +K +Get +Cops -Cop.

- : big-lemma-unhandled IOinD O Ep K
        get-op-case/nil
        opcof/nil
        (cof/op (eof/ins IinI) O Ep ([_] [x] cof/app K x) IOinD')
    <- instance-in-itself I IinI
    <- singleton-in-dirt IOinD IOinD'.

- : big-lemma-unhandled IOinD O Ep K
        (get-op-case/cons _ GetRest ITE)
        (opcof/cons _ _ Cop OtherCops _)
        Cop''
    <- big-lemma-unhandled IOinD O Ep K GetRest OtherCops Cop'
    <- if-then-typd Epp Kk ITE (Cop Epp Ep Kk K) Cop' Cop''.

%worlds (vars) (big-lemma-unhandled _ _ _ _ _ _ _).
%total {Get} (big-lemma-unhandled _ _ _ _ Get _ _).

big-lemma : in-dirt-instance I O D ->
            D <d D' ->
            sig O A1 A2 ->
            eof Ep A1 ->
            eof K (A2 --> A' ! D'') ->
            get-op-case I O Cops Cop ->
            opcof Cops (A' ! D'') Dcov ->
            covers D Dcov D'' -> 
            covers D' Dcov D'' ->
            cof (Cop Ep K) (A' ! D'') ->
            type.
%mode big-lemma +IOinD +DD' +O +Ep +K +Get +Cops +Covers +Covers' -Cop.

- : big-lemma in-dirt-instance/here _ O Ep K Get Cops (covers/cons-here IOinD _) _ Cop
    <- big-lemma-handled IOinD O Ep K Get Cops Cop.

- : big-lemma in-dirt-instance/here DD' O Ep K Get Cops (covers/cons-there IOinD _) _ Cop
    <- big-lemma-unhandled IOinD O Ep K Get Cops Cop.

- : big-lemma (in-dirt-instance/there IOinD) (<d/cons _ DD') O Ep K Get Cops Cov Cov' Cop
    <- covers-rest Cov Cov- 
    <- big-lemma IOinD DD' O Ep K Get Cops Cov- Cov' Cop.

%worlds (vars) (big-lemma _ _ _ _ _ _ _ _ _ _).
%total {IOinD} (big-lemma IOinD _ _ _ _ _ _ _ _ _).

preservation-with-op : cof (op (ins I) O Ep K) (A ! D) -> get-op-case I O Cops Cop -> A <t A' -> D <d D' -> eof (hnd Cv Cops) (A' ! D' ==> A'' ! D'') -> cof (Cop Ep (fun ([y] with (hnd Cv Cops) (K y)))) (A'' ! D'') -> type.
%mode preservation-with-op +E +Get +AA' +DD' +C -C'.

- : preservation-with-op (cof/op Ei O Ep K ROinD) Get (AA' : A <t A') DD' (eof/hnd Cv Cops Covers) Cop
     <- <d/in-dirt ROinD DD' ROinD'
     <- instance-expr-in-region Ei IinR
     <- instance-in-region-in-dirt IinR ROinD' IOinD'
     <- <d/refl _ D'D'
     <- big-lemma IOinD' D'D' O Ep (eof/fun [x] [e] cof/with (eof/hnd Cv Cops Covers) ((cof/sub (K x e) (<dt/! AA' DD')))) Get Cops Covers Covers Cop.

- : preservation-with-op (cof/sub E (<dt/! A<A' D<D')) Get A'<A'' D'<D'' C B
     <- <d/trans D<D' D'<D'' D<D''
     <- <t/trans A<A' A'<A'' A<A''
     <- preservation-with-op E Get A<A'' D<D'' C B.

- : preservation-with-op E Get A<A' D<D' (eof/sub C (<t/==> (<dt/! A'<A'' D'<D'') L2)) (cof/sub B L2)
     <- <d/trans D<D' D'<D'' D<D''
     <- <t/trans A<A' A'<A'' A<A''
     <- preservation-with-op E Get A<A'' D<D'' C B.

%worlds (vars) (preservation-with-op _ _ _ _ _ _).
%total {E C} (preservation-with-op E _ _ _ C _).


preservation : cof C A -> step C C' -> cof C' A -> type.
preservation-let : cof C1 (A ! D) -> ({x} eof x A -> cof (C2 x) (A' ! D)) -> step (let C1 C2) C' -> cof C' (A' ! D) -> type.
preservation-with : eof E (B ==> B') -> cof C B -> step (with E C) C' -> cof C' B' -> type.
%mode preservation +C +S -C'.
%mode preservation-let +C1 +C2 +S -C'.
%mode preservation-with +E +C +S -C'.

- : preservation (cof/cond E C1 C2) S C'
     <- preservation-cond E C1 C2 S C'.

- : preservation (cof/zro? E) S C'
     <- preservation-zro? _ E S C'.

- : preservation (cof/pred E) S C'
     <- preservation-pred _ E S C'.

- : preservation (cof/app E1 E2) S C'
     <- preservation-app E1 E2 S C'.

- : preservation (cof/let C1 C2) S C'
     <- preservation-let C1 C2 S C'.

- : preservation (cof/letr C1 C2) S
     (C2 _ (eof/fun ([_] [x] (cof/letr C1 ([_] [f] C1 _ _ f x))))).

- : preservation (cof/with E C) S C'
     <- preservation-with E C S C'.

- : preservation (cof/sub C CC') S (cof/sub C' CC')
     <- preservation C S C'.


- : preservation-let C1 C2 step/let-val C'
     <- <d/refl _ D<D
     <- preservation-let-val C1 D<D C2 C'.

- : preservation-let C1 C2 step/let-op C'
     <- <d/refl _ D<D
     <- preservation-let-op C1 D<D C2 C'.

- : preservation-let C1 C2 (step/let-step S) (cof/let C1' C2)
     <- preservation C1 S C1'.


- : preservation-with C E step/with-val C'
     <- <t/refl _ A<A
     <- <d/refl _ D<D
     <- preservation-with-val E A<A D<D C C'.

- : preservation-with C E (step/with-op Get) C'
     <- <t/refl _ A<A
     <- <d/refl _ D<D
     <- preservation-with-op E Get A<A D<D C C'.

- : preservation-with E C (step/with-step S) (cof/with E C')
     <- preservation C S C'.

%worlds (vars) (preservation _ _ _) (preservation-let _ _ _ _) (preservation-with _ _ _ _).
%total {(C1 C2 C) (S1 S2 S)} (preservation C1 S1 _) (preservation-let C2 _ S2 _) (preservation-with _ C S _).
