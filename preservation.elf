%%%%% Preservation theorem %%%%%

matijas-lemma : cof Sig (op Ei O Ep K) (A ! D) -> sig Sig O A1 A2 -> eof Sig Ei (inst R) -> eof Sig Ep A1 -> ({x} var x A2 -> cof Sig (K x) (A ! D)) -> in-dirt-region R O D -> type.
%mode matijas-lemma +OpCall -O -Ei -Ep -K -ROinD.

- : matijas-lemma (cof/op Ei O Ep K ROinD) O Ei Ep K ROinD.

- : matijas-lemma (cof/sub OpCall (<dt/! A1<A2 D<D')) O Ei Ep ([x] [dx] (cof/sub (K x dx) (<dt/! A1<A2 D<D'))) ROinD'
    <- matijas-lemma OpCall O Ei Ep K ROinD
    <- in-dirt-region/<d ROinD D<D' ROinD'.

%worlds (topen) (matijas-lemma _ _ _ _ _ _).
%total {S} (matijas-lemma S _ _ _ _ _).

ohads-lemma : scof Sig (op Ei O Ep K) S D -> sig Sig O A1 A2 -> eof Sig Ei (inst R) -> eof Sig Ep A1 -> ({x} var x A2 -> scof Sig (K x) S D) -> in-dirt-region R O D -> type.
%mode ohads-lemma +OpCall -O -Ei -Ep -K -ROinD.

- : ohads-lemma (scof/plain OpCall) O Ei Ep ([x] [dx] scof/plain (K x dx)) ROinD
     <- matijas-lemma OpCall O Ei Ep K ROinD.

- : ohads-lemma (scof/forall S) O Ei Ep ([x] [dx] scof/forall ([t] K t x dx)) ROinD
     <- {t} ohads-lemma (S t) O Ei Ep (K t) ROinD.

%worlds (topen) (ohads-lemma _ _ _ _ _ _).
%total {S} (ohads-lemma S _ _ _ _ _).


% To prove preservation, we need to simultaneously prove two other lemmas that
% use preservation of the type computations in the evaluation context of either
% let-binding or handling construct.

preservation      : cof Sig C A -> step Sig C C' -> cof Sig C' A -> type.
preservation-scof  : scof Sig C S D -> step Sig C C' -> scof Sig C' S D -> type.
preservation-let  : scof Sig C1 S D -> ({x} pvar x S -> cof Sig (C2 x) (A ! D))
                     -> step Sig (let C1 C2) C' -> cof Sig C' (A ! D) -> type.
preservation-with : cof Sig C B1 -> B1 <dt B1' -> eof Sig E (B1' ==> B2)
                     -> step Sig (with E C) C' -> cof Sig C' B2 -> type.
%mode preservation +C +S -C'.
%mode preservation-scof +C +S -C'.
%mode preservation-let +C1 +C2 +S -C'.
%mode preservation-with +C +B1<B1' +E +S -C'.

- : preservation (cof/cond _ C1 _) step/cond-tru C1.

- : preservation (cof/cond _ _ C2) step/cond-fls C2.

- : preservation (cof/mtch E C1 C2) S C'
     <- preservation-mtch E C1 C2 S C'.

- : preservation (cof/app E1 E2) S C'
     <- preservation-app E1 E2 S C'.

- : preservation (cof/let C1 C2) S C'
     <- preservation-let C1 C2 S C'.

- : preservation (cof/letr C1 C2) S C'
     <- subst C2 (eof/fun ([_] [x] (cof/letr C1 ([_] [f] C1 _ f _ x)))) C'.

- : preservation (cof/with E C) S C'
     <- <dt/refl _ B1<B1
     <- preservation-with C B1<B1 E S C'.

- : preservation (cof/sub C B<B') S (cof/sub C' B<B')
     <- preservation C S C'.


- : preservation-scof (scof/plain C) S (scof/plain C')
     <- preservation C S C'.

- : preservation-scof (scof/forall C) S (scof/forall C')
     <- {t} preservation-scof (C t) S (C' t).


- : preservation-let C1 C2 step/let-op (cof/op Ei O Ep ([_] [y] (cof/let (K _ y) C2)) ROinD)
     <- ohads-lemma C1 O Ei Ep K ROinD.

- : preservation-let C1 C2 step/let-val C'
     <- val-ceof C1 E
     <- psubst-cof E C2 C'.

- : preservation-let C1 C2 (step/let-step S) (cof/let C1' C2)
     <- preservation-scof C1 S C1'.


- : preservation-with (cof/sub C B1<B1') B1'<B1'' E S C'
     <- <dt/trans B1<B1' B1'<B1'' B1<B1''
     <- preservation-with C B1<B1'' E S C'.

- : preservation-with C B1<B1' (eof/sub E (<t/==> B1'<B1'' B2''<B2')) S (cof/sub C' B2''<B2')
     <- <dt/trans B1<B1' B1'<B1'' B1<B1''
     <- preservation-with C B1<B1'' E S C'.

- : preservation-with C B1<B1' (eof/sub E <t/ref) S C'
     <- preservation-with C B1<B1' E S C'.

- : preservation-with (cof/val E) (<dt/! A<A' _) (eof/hnd Cv _ _) step/with-val C'
     <- subst Cv (eof/sub E A<A') C'.

- : preservation-with (cof/op Ei _ Ep K ROinD) (<dt/! A<A' D<D') (eof/hnd Cv OCs Cov) (step/with-op OC O) C'
     <- instance-expr-in-region Ei IinR
     <- in-dirt-region/<d ROinD D<D' ROinD'
     <- in-region-in-dirt IinR ROinD' IOinD'
     <- preservation-with-op IOinD' O Ep
         (eof/fun [x] [e] cof/with (eof/hnd Cv OCs Cov) (cof/sub (K x e) (<dt/! A<A' D<D')))
         OC OCs Cov C'.

- : preservation-with C B1<B1' E (step/with-step S) (cof/with E C')
     <- preservation (cof/sub C B1<B1') S C'.

%worlds (topen) (preservation _ _ _) (preservation-scof _ _ _) (preservation-let _ _ _ _) (preservation-with _ _ _ _ _).
%total {(S S' Sl Sw) (C C' Cl Ew) (C C' Cl Cw)} (preservation C S _) (preservation-scof C' S' _) (preservation-let Cl _ Sl _) (preservation-with Cw _ Ew Sw _).
