%%% Preservation

preservation-if-then-op-case : {E} {K} (if-then-op-case I O I' O') OC OC' OC''
                                -> cof Sig (OC E K) B -> cof Sig (OC' E K) B
                                -> cof Sig (OC'' E K) B -> type.
%mode preservation-if-then-op-case +E +K +D +C +C' -C''.

- : preservation-if-then-op-case _ _ (if-then-op-case/yes _ ) C _ C.
- : preservation-if-then-op-case _ _ (if-then-op-case/no _) _ C C.

%worlds (vars) (preservation-if-then-op-case _ _ _ _ _ _).
%total {} (preservation-if-then-op-case _ _ _ _ _ _).


preservation-pred : {D} eof Sig E nat -> pred E ~> C' -> cof Sig C' (nat ! D) -> type.
%mode preservation-pred +D +E +S -C'.

- : preservation-pred _ eof/zro ~>/pred-zro (cof/val eof/zro).

- : preservation-pred _ (eof/suc E) ~>/pred-suc (cof/val E).

- : preservation-pred D (eof/sub E _) S C'
     <- preservation-pred D E S C'.

%worlds (vars) (preservation-pred _ _ _ _).
%total {E} (preservation-pred _ E _ _).


preservation-app : eof Sig E1 (A --> B) -> eof Sig E2 A -> app E1 E2 ~> C -> cof Sig C B -> type.
%mode preservation-app +E1 +E2 +S -C.

- : preservation-app (eof/fun E1) E2 ~>/app (E1 _ E2).

- : preservation-app (eof/sub E1 (<t/--> A'<A B<B')) E2 S (cof/sub C B<B')
     <- preservation-app E1 (eof/sub E2 A'<A) S C.

%worlds (vars) (preservation-app _ _ _ _).
%total {E1} (preservation-app E1 _ _ _).

unequal-instance-in-rest : in-dirt-instance I O (dirt/cons I' O' D) -> apart I O I' O' -> in-dirt-instance I O D -> type.
%mode unequal-instance-in-rest +IOinI'O'D +IO!I'O' -IOinD.

%worlds () (unequal-instance-in-rest _ _ _).
%trustme %total {} (unequal-instance-in-rest _ _ _).


preservation-handled-op : in-dirt-instance I O Dcov -> sig Sig O A1 A2
                           -> eof Sig Ep A1 -> eof Sig K (A2 --> B)
                           -> get-op-case I O OCs OC -> opcof Sig OCs B Dcov
                           -> cof Sig (OC Ep K) B -> type.
%mode preservation-handled-op +IOinDcov +O +Ep +K +OC +OCs -C'.

- : preservation-handled-op _ _ Ep K
     (get-op-case/cons _ (if-then-op-case/yes _))
     (opcof/cons _ _ OC _ _)
     (OC _ Ep _ K).

- : preservation-handled-op IOinDcov O Ep K
     (get-op-case/cons OC (if-then-op-case/no _))
     (opcof/cons _ _ _ OCs _)
     C'
     <- preservation-handled-op IOinDcov O Ep K OC OCs C'.

- : preservation-handled-op IOinDcov O Ep K
     (get-op-case/cons OC (if-then-op-case/no A))
     (opcof/cons _ _ _ OCs _)
     C'
     <- unequal-instance-in-rest IOinDcov A IOinDcov'
     <- preservation-handled-op IOinDcov' O Ep K OC OCs C'.

%worlds (vars) (preservation-handled-op _ _ _ _ _ _ _).
%total {OC} (preservation-handled-op _ _ _ _ OC _ _).


preservation-unhandled-op : in-dirt-instance I O D' -> sig Sig O A1 A2
                             -> eof Sig Ep A1 -> eof Sig K (A2 --> A' ! D')
                             -> get-op-case I O OCs OC -> opcof Sig OCs (A' ! D') _
                             -> cof Sig (OC Ep K) (A' ! D') -> type.
%mode preservation-unhandled-op +IOinD' +O +Ep +K +OC +OCs -C'.

- : preservation-unhandled-op IOinD' O Ep K
     get-op-case/nil
     opcof/nil
     (cof/op (eof/ins in-region/here) O Ep ([_] [x] cof/app K x) (in-dirt/cons IOinD' in-dirt/empty)).

- : preservation-unhandled-op _ _ Ep K
     (get-op-case/cons _ (if-then-op-case/yes _))
     (opcof/cons _ _ OC _ _)
     (OC _ Ep _ K).

- : preservation-unhandled-op IOinD' O Ep K
     (get-op-case/cons OC (if-then-op-case/no _))
     (opcof/cons _ _ _ OCs _)
     C'
     <- preservation-unhandled-op IOinD' O Ep K OC OCs C'.

%worlds (vars) (preservation-unhandled-op _ _ _ _ _ _ _).
%total {OC} (preservation-unhandled-op _ _ _ _ OC _ _).


preservation-with-op : in-dirt-instance I O D -> sig Sig O A1 A2
                        -> eof Sig Ep A1 -> eof Sig K (A2 --> A' ! D')
                        -> get-op-case I O OCs OC -> opcof Sig OCs (A' ! D') Dcov
                        -> covers D Dcov D'
                        -> cof Sig (OC Ep K) (A' ! D') -> type.
%mode preservation-with-op +IOinD +O +Ep +K +OC +OCs +Cov -OC.

- : preservation-with-op in-dirt-instance/here O Ep K OC OCs (covers/cons-here IOinDcov _) C'
     <- preservation-handled-op IOinDcov O Ep K OC OCs C'.

- : preservation-with-op in-dirt-instance/here O Ep K OC OCs (covers/cons-there IOinD' _) C'
     <- preservation-unhandled-op IOinD' O Ep K OC OCs C'.

- : preservation-with-op (in-dirt-instance/there IOinD) O Ep K OC OCs Cov C'
     <- covers-rest Cov Cov' 
     <- preservation-with-op IOinD O Ep K OC OCs Cov' C'.

%worlds (vars) (preservation-with-op _ _ _ _ _ _ _ _).
%total {IOinD} (preservation-with-op IOinD _ _ _ _ _ _ _).


preservation : cof Sig C A -> C ~> C' -> cof Sig C' A -> type.
preservation-let : cof Sig C1 (A ! D) -> D <d D' -> ({x} eof Sig x A -> cof Sig (C2 x) (A' ! D')) -> let C1 C2 ~> C' -> cof Sig C' (A' ! D') -> type.
preservation-with : cof Sig C B1 -> B1 <dt B1' -> eof Sig E (B1' ==> B2) -> with E C ~> C' -> cof Sig C' B2 -> type.
%mode preservation +C +S -C'.
%mode preservation-let +C1 +D<D' +C2 +S -C'.
%mode preservation-with +C +B1<B1' +E +S -C'.

- : preservation (cof/cond _ C1 _) ~>/cond-tru C1.

- : preservation (cof/cond _ _ C2) ~>/cond-fls C2.

- : preservation (cof/zro? _) ~>/zro?-zro (cof/val eof/tru).

- : preservation (cof/zro? _) ~>/zro?-suc (cof/val eof/fls).

- : preservation (cof/pred E) S C'
     <- preservation-pred _ E S C'.

- : preservation (cof/app E1 E2) S C'
     <- preservation-app E1 E2 S C'.

- : preservation (cof/let C1 C2) S C'
     <- <d/refl _ D<D
     <- preservation-let C1 D<D C2 S C'.

- : preservation (cof/letr C1 C2) S
     (C2 _ (eof/fun ([_] [x] (cof/letr C1 ([_] [f] C1 _ _ f x))))).

- : preservation (cof/with E C) S C'
     <- <dt/refl _ B1<B1
     <- preservation-with C B1<B1 E S C'.

- : preservation (cof/sub C B<B') S (cof/sub C' B<B')
     <- preservation C S C'.


- : preservation-let (cof/sub C1 (<dt/! A<A' D<D')) D'<D'' C2 S C'
     <- <d/trans D<D' D'<D'' D<D''
     <- preservation-let C1 D<D'' ([x] [e] (C2 x (eof/sub e A<A'))) S C'.

- : preservation-let (cof/val E) _ C2 ~>/let-val (C2 _ E).

- : preservation-let (cof/op Ei O Ep K ROinD) D<D' C2 ~>/let-op (cof/op Ei O Ep ([_] [y] (cof/let (cof/sub (K _ y) (<dt/! A<A D<D')) C2)) ROinD')
     <- in-dirt/<d ROinD D<D' ROinD'
     <- <t/refl A A<A.

- : preservation-let C1 D<D' C2 (~>/let-step S) (cof/let C1' C2)
     <- <t/refl _ A<A
     <- preservation (cof/sub C1 (<dt/! A<A D<D')) S C1'.


- : preservation-with (cof/sub C B1<B1') B1'<B1'' E S C'
     <- <dt/trans B1<B1' B1'<B1'' B1<B1''
     <- preservation-with C B1<B1'' E S C'.

- : preservation-with C B1<B1' (eof/sub E (<t/==> B1'<B1'' B2''<B2')) S (cof/sub C' B2''<B2')
     <- <dt/trans B1<B1' B1'<B1'' B1<B1''
     <- preservation-with C B1<B1'' E S C'.

- : preservation-with (cof/val E) (<dt/! A<A' _) (eof/hnd Cv _ _) ~>/with-val (Cv _ (eof/sub E A<A')).

- : preservation-with (cof/op Ei O Ep K ROinD) (<dt/! A<A' D<D') (eof/hnd Cv OCs Cov) (~>/with-op OC) C'
     <- instance-expr-in-region Ei IinR
     <- in-dirt/<d ROinD D<D' ROinD'
     <- instance-in-region-in-dirt IinR ROinD' IOinD'
     <- preservation-with-op IOinD' O Ep (eof/fun [x] [e] cof/with (eof/hnd Cv OCs Cov) (cof/sub (K x e) (<dt/! A<A' D<D'))) OC OCs Cov C'.

- : preservation-with C B1<B1' E (~>/with-step S) (cof/with E C')
     <- preservation (cof/sub C B1<B1') S C'.

%worlds (vars) (preservation _ _ _) (preservation-let _ _ _ _ _) (preservation-with _ _ _ _ _).
%total {(S Sl Sw) (C Cl Ew) (C Cl Cw)} (preservation C S _) (preservation-let Cl _ _ Sl _) (preservation-with Cw _ Ew Sw _).
