Specification "mon".

Theorem eff-kind-deterministic : forall C Eff Eff', {eff-kind C Eff} -> {eff-kind C Eff'} -> Eff = Eff'.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.

Theorem hoisting-equal-eff : forall E C1 C2 Eff1 Eff2,
    {hoisting E} -> {of/evctx E C1 C2} ->
    {eff-kind C1 Eff1} -> {eff-kind C2 Eff2} -> Eff1 = Eff2.
induction on 1. intros. case H1.
    case H2. apply eff-kind-deterministic to H3 H4. search.
    case H2. apply IH to H5 H7 H3 _. apply eff-kind-deterministic to H4 H6. search.
    case H2. apply IH to H5 H6 H3 _. search.

Theorem pluggable : forall E, {hoisting E} -> exists ER, {pi x\ plug E (ret x) (ER x)}.
induction on 1. intros. case H1.
    exists x\ ret x. search.
    apply IH to H2. exists x\ (bind (ER x x) X). search.
    apply IH to H2. exists x\ (app (ER x x) X). search.

Theorem progress : forall M C, {of/comp M C} -> {progresses M C}.
induction on 1. intros. case H1.
    search.
    search.
    case H2.
        search.
    case H2.
        search.
        search.
    case H2.
        search.
    apply IH to H3. case H5.
        search.
        case H3.
        case H6. search.
        case H6. search.
    apply IH to H2. case H4.
        case H2.
        search.
        case H5. search.
        case H5. search.
    case H2. apply IH to H3. case H6.
        search.
        case H3.
        case H7. search.
        apply pluggable to H8. search.
    search.

Theorem of/plug : forall L E M EM C1 C2,
    {of/evctx E C1 C2} -> {L |- of/comp M C1} -> {plug E M EM} -> {L |- of/comp EM C2}.
induction on 1. intros. case H1.
    case H3. search.
    case H3. apply IH to H5 H2 H7. search.
    case H3. apply IH to H4 H2 H6. search.
    case H3. apply IH to H5 H2 H6. search.

Theorem of/unplug : forall E M EM C2,
    {plug E M EM} -> {of/comp EM C2} -> exists C1, {of/comp M C1} /\ {of/evctx E C1 C2}.
induction on 1. intros. case H1.
    search.
    case H2. apply IH to H3 H5. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H5. search.

Theorem eff-kind-deterministic : forall C Eff Eff', {eff-kind C Eff} -> {eff-kind C Eff'} -> Eff = Eff'.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.

Theorem reduce-preservation : forall M M' C, {of/comp M C} -> {reduce M M'} -> {of/comp M' C}.
intros. case H2.
    case H1. case H3. inst H4 with n1 = V1, n2 = V2. cut H7. search.
    case H1. case H3. inst H4 with n1 = V. cut H7. search.
    case H1. case H3. inst H5 with n1 = V. cut H7. search.
    case H1. case H3. search.
    case H1. case H4. inst H5 with n1 = V. cut H7. search.
    case H1. case H3. inst H5 with n1 = V. cut H6. search.
    case H1. case H3. case H4. inst H5 with n1 = A, n2 = V. cut H8. search.
    case H1.
        apply of/unplug to H3 H7. case H8. case H6.
        apply hoisting-equal-eff to H4 H9 _ _.
        assert {of/value (thunk N) (u (C1 A1))}.
        assert {of/value n1 A1 |- of/comp (reify (ER n1) (mon Nu1 Nb1)) (C1 A)}.
            apply of/plug to H9 _ H5 with L = of/value n1 A1 :: nil. search.
        inst H12 with n1 = A1, n2 = A, n3 = thunk N, n4 = thunk (fun (x\reify (ER x) (mon Nu1 Nb1))).
        cut H15. search.
    

Theorem preservation : forall M M' C, {of/comp M C} -> {step M M'} -> {of/comp M' C}.
intros. case H2.
    apply of/unplug to H3 H1.
    apply reduce-preservation to H6 H4.
    apply of/plug to H7 H8 H5 with L = nil. search.
