%%%%% Representation of effects %%%%%
 
% Effects, operation symbols and instances are all just labels,
% and we implement each one with a single constructor that wraps a name.
% Note that operation symbols and instances are distinguished by their effect
% and all start counting from zero.
% We also define operations as pairs of instances and operations.

effect : type.
%name effect Eff.
 
effect/ : name -> effect.
 
 
opsym : effect -> type.
%name opsym O.
 
opsym/ : {Eff} name -> opsym Eff.
 
 
instance : effect -> type.
%name instance I.
 
instance/ : {Eff} name -> instance Eff.


operation : effect -> type.
%name operation IO.
 
# : instance Eff -> opsym Eff -> operation Eff.
%infix none 50 #.



%%% Decidability of operations %%%

% The equality of operations has to be decidable
% so we can always select the right handler case.
% This decidability is inherited from the decidability
% of effects, instances and operation symbols.

apart : operation Eff -> operation Eff' -> type.
%mode apart +IO +I'O'.
 
apart/effect   : apart (instance/ (effect/ X) _ # _) (instance/ (effect/ Y) _ # _)
                   <- apart-name X Y.
apart/instance : apart (instance/ _ X # _) (instance/ _ Y # _)
                   <- apart-name X Y.
apart/opsym    : apart (_ # opsym/ _ X) (_ # opsym/ _ Y)
                   <- apart-name X Y.
 
 
decidable : operation Eff -> operation Eff' -> type.
 
decidable/equal : decidable IO IO.
decidable/apart : decidable IO I'O'
                   <- apart IO I'O'.
 


%%% Regions %%%

% For the sake of simplicity, we represent regions with lists.
% This representation is sufficient, because we only need to test for containment,
% which we do by "in-region" for instances and "<r" for regions.

region : effect -> type.
%name region R.
 
region/empty : region Eff.
region/cons  : instance Eff -> region Eff -> region Eff.
 
 
in-region : instance Eff -> region Eff -> type.
 
in-region/here  : in-region I (region/cons I R).
in-region/there : in-region I (region/cons _ R)
                   <- in-region I R.
 

<r : region Eff -> region Eff -> type.
%infix none 30 <r.
 
<r/empty : region/empty <r R.
<r/cons  : region/cons I R <r R'
            <- R <r R'
            <- in-region I R'.
 


%%% Dirt %%%

% Like regions, we represent dirt with lists, and define "in-dirt" and "<d".

dirt : type.
%name dirt D.
 
dirt/empty : dirt.
dirt/cons  : operation Eff -> dirt -> dirt.
 
 
in-dirt : operation Eff -> dirt -> type.
 
in-dirt/here  : in-dirt IO (dirt/cons IO D).
in-dirt/there : in-dirt IO (dirt/cons _ D)
                 <- in-dirt IO D.
 

<d : dirt -> dirt -> type.
%infix none 30 <d.
 
<d/empty : dirt/empty <d D.
<d/cons  : dirt/cons IO D <d D'
            <- D <d D'
            <- in-dirt IO D'.
 

% In the typing rule for handlers, we use "covers D D1 D2",
% which states that the dirt "D" is contained in the union of "D1" and "D2".

covers : dirt -> dirt -> dirt -> type.
 
covers/empty      : covers dirt/empty _ _.
covers/cons-here  : covers (dirt/cons IO D) D1 D2
                     <- covers D D1 D2
                     <- in-dirt IO D1.
covers/cons-there : covers (dirt/cons IO D) D1 D2
                     <- covers D D1 D2
                     <- in-dirt IO D2.
 

% In the typing rule for operation calls, we use "in-dirt-region R O D",
% which states that "I # O" is in "D" for every "I" in "R".

in-dirt-region : region Eff -> opsym Eff -> dirt -> type.
 
in-dirt-region/empty : in-dirt-region region/empty _ _.
in-dirt-region/cons  : in-dirt-region (region/cons I R) O D
                 <- in-dirt-region R O D
                 <- in-dirt (I # O) D.
