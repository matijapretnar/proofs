Specification "eff".
Import "lemmas-eff".

Theorem eff/can-get-valcase : forall H A Eff1 Eff2 C,
    {eff/of-handler H A Eff1 Eff2 C} -> exists M, {eff/get-valcase H M}.
induction on 1. intros. case H1. case H2.
    search.
    apply IH to H6. search.

Theorem eff/can-get-opcase : forall H A Eff1 Eff2 C Op A1 A2,
    {eff/of-handler H A Eff1 Eff2 C} -> {eff/op-sig Eff1 Op A1 A2} -> exists M, {eff/get-opcase H Op M}.
induction on 1. intros. case H1. case H3.
    case H2.
    case H2.
        search.
        apply IH to H7 H10. search.

Theorem eff/progress :
    forall M Eff C, {eff/of-comp M Eff C} -> {eff/progresses M Eff}.
induction on 1.

    intros Hwf. Hwellf: case Hwf.

    case Hwellf.
        search.
        search.
        Hwf: case H1. case Hwf.
            search.
        Hwf: case H1. case Hwf.
            apply eff/can-get-case to H2 H4.
            search.
        Hwf: case H1. case Hwf.
            search.
        apply IH to H1. case H3.
            search.
            Hwf: case H1. case Hwf.
            Hwf: case H1. case Hwf.
            case H4. search.
            case H1. search.
        apply IH to H1. case H3.
            Hwf: case H1. case Hwf.
            search.
            Hwf: case H1. case Hwf.
            case H4. search.
            case H1. search.
        apply IH to H1. apply IH to H2. search.
        apply IH to H1. case H2.
            Hwf: case H1. case Hwf.
            Hwf: case H1. case Hwf.
            search.
            case H3. search.
            case H1. search.
        apply IH to H1. case H2.
            Hwf: case H1. case Hwf.
            Hwf: case H1. case Hwf.
            search.
            case H3. search.
            case H1. search.
        case Hwellf1. search.
        apply IH to H1. case H3.
            apply eff/can-get-valcase to H2. search.
            Hwf: case H1. case Hwf.
            Hwf: case H1. case Hwf.
            case H4. search.
            apply eff/pluggable to H6. apply eff/can-get-opcase to H2 H4. search.

Theorem eff/reduce-preservation : forall M M' Eff C, {eff/of-comp M Eff C} -> {eff/reduce M M'} -> {eff/of-comp M' Eff C}.
intros. Hwf: case H1. case H2.
    case Hwf. case H3. case H5. inst H4 with n1 = V1, n2 = V2. cut H9. search.
    case Hwf. case H4. case H6. apply eff/of-get-case to H3 H5 H9. inst H10 with n1 = V. cut H11. search.
    case Hwf. case H3. case H4. search.
    case Hwf. case H3. case H5. inst H4 with n1 = V. cut H8. search.
    case Hwf. case H3. case H5. inst H7 with n1 = V. cut H8. search.
    case Hwf. case H3. case H4. search.
    case Hwf. case H3. case H4. search.
    case Hwf. apply eff/of-valcase to H5 H3. case H4. case H7. inst H6 with n1 = V. cut H10. search.
    case Hwf.
        apply eff/of-opcase to H8 H6.
        apply eff/of-unplug to H3 H7.
        apply eff/hoisting-equal-eff to H5 H12.
        case H11. case H13.
        apply eff/op-sig-det to H9 H15.
        case H14.
        inst H10 with n1 = V, n2 = (eff/thunk (eff/fun (x\eff/handle (ER x) H))).
        apply eff/of-plug to H12 _ H4 with L = eff/of-value n1 A2 :: nil.
        assert {eff/of-comp (eff/fun (x\eff/handle (ER x) H))
         Eff (eff/arrow B C)}.
        cut H19.
        search.

Theorem eff/preservation : forall M M' Eff C, {eff/of-comp M Eff C} -> {eff/step M M'} -> {eff/of-comp M' Eff C}.
intros. case H2.
    apply eff/of-unplug to H3 H1.
    apply eff/reduce-preservation to H6 H4.
    apply eff/of-plug to H7 H8 H5 with L = nil.
    search.

Theorem eff/safety : forall M A,
    {eff/of-comp M eff/empty (eff/f A)} ->
        (exists N, {eff/step M N} /\ {eff/of-comp N eff/empty (eff/f A)}) \/
        (exists V, M = eff/ret V /\ {eff/of-value V A}).
intros. prog_part : apply eff/progress. apply prog_part to H1. case H2.
    case H1. case H3. search.
    case H1. case H3.
    case H1. case H5.
    apply eff/preservation to H1 H3. search.
    case H3.
