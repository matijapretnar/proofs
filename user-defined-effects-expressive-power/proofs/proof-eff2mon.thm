Specification "eff2mon".
Import "lemmas-mon".

Theorem eff2mon/hoisting : forall E E',
    {eff/hoisting E} -> {eff2mon/evctx E E'} -> {mon/hoisting E'}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.

Theorem eff2mon/unplug : forall E M EM EM',
    {eff/plug E M EM} -> {eff2mon/comp EM EM'} ->
    exists E' M', {eff2mon/evctx E E'} /\ {eff2mon/comp M M'} /\ {mon/plug E' M' EM'}.
induction on 1. intros. case H1.
    search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.

Theorem eff2mon/plug : forall L E M EM E' M' EM',
    {eff/plug E M EM} -> {eff2mon/evctx E E'} -> {L |- eff2mon/comp M M'} ->
    {mon/plug E' M' EM'} -> {L |- eff2mon/comp EM EM'}.
induction on 2. intros. case H2.
    case H1. case H4. search.
    case H1. case H4. apply IH to H7 H5 H3 H8. search.
    case H1. case H4. apply IH to H7 H5 H3 H8. search.
    case H1. case H4. apply IH to H6 H5 H3 H7. search.
    case H1. case H4. apply IH to H6 H5 H3 H7. search.
    case H1. case H4. case H8. case H9. apply IH to H7 H5 H3 H10. search.

Theorem eff2mon/get-case : forall Ms L M Ms',
    {eff/get-case Ms L M} -> {eff2mon/cases Ms Ms'} ->
    exists M', {mon/get-case Ms' L M'}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H4 H5. search.

Theorem eff2mon/get-case/unique : forall Ms L M Ms' M',
    {eff/get-case Ms L M} -> {eff2mon/cases Ms Ms'} ->
    {mon/get-case Ms' L M'} -> {pi x\ pi x'\ eff2mon/value x x' => eff2mon/comp (M x) (M' x')}.
induction on 1. intros.
assert forall N, {apart N N} -> false.
    induction on 1. intros. case H4. apply IH1 to H5.
case H2.
    case H1.
    case H1.
        case H3.
            search.
            case H7. apply H4 to H9.
        case H3.
            case H7. apply H4 to H9.
            apply IH to H8 H5 H10. search.

Theorem eff2mon/get-valcase : forall H M Nu' Ms',
    {eff/get-valcase H M} -> {eff2mon/handler H Nu' Ms'} ->
    {pi x\ pi x'\ eff2mon/value x x' => eff2mon/comp (M x) (Nu' x')}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.

Theorem eff2mon/get-opcase : forall H X M Nu' Ms',
    {eff/get-opcase H (eff/op X) M} -> {eff2mon/handler H Nu' Ms'} ->
    exists M', {mon/get-case Ms' (lbl X) (p\ mon/split p M')}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H4 H5. case H3. search.

Theorem eff2mon/get-opcase/unique : forall H X M Nu' Ms' M',
    {eff/get-opcase H (eff/op X) M} -> {eff2mon/handler H Nu' Ms'} ->
    {mon/get-case Ms' (lbl X) (p\ mon/split p M')} -> 
    {pi x\ pi x'\ pi k\ pi k'\ eff2mon/value x x' => eff2mon/value k k' => eff2mon/comp (M x k) (M' x' k')}.
induction on 1. intros.
assert forall N, {apart N N} -> false.
    induction on 1. intros. case H4. apply IH1 to H5.
case H1.
    case H2. case H3.
        search.
        case H7. apply H4 to H9.
    case H2. case H3.
        case H5. apply H4 to H9.
        apply IH to H6 H7 H10. search.

Theorem eff2mon/reduce : forall M1 M2 M1',
    {eff2mon/comp M1 M1'} -> {eff/reduce M1 M2} ->
    exists M2', {eff2mon/comp M2 M2'} /\ mon/cong M1' M2'.
induction on 2. intros. case H2.
% split (pair V1 V2) M ~> M V1 V2
    case H1. case H3.
    inst H4 with n1 = V1, n2 = V2, n3 = V1', n4 = V2'.
    cut H7. search.
% case (inj V) Ms ~> M V
    case H1. case H4.
    apply eff2mon/get-case to H3 H5.
    apply eff2mon/get-case/unique to H3 H5 H7.
    inst H8 with n1 = V, n2 = V'1.
    cut H9. search.
% force (thunk M) ~> M
    case H1. case H3.
    search.
% bind (ret V) N ~> N V
    case H1. case H3. inst H4 with n1 = V, n2 = V'.
    cut H6. search.
% app (fun M) V ~> M V
    case H1. case H3. inst H5 with n1 = V, n2 = V'.
    cut H6. search.
% prj1 (comppair M1 M2) ~> M1
    case H1. case H3. search.
% prj2 (comppair M1 M2) ~> M2
    case H1. case H3. search.
% handle (ret V) H ~> Hret V
    case H1. case H4.
    apply eff2mon/get-valcase to H3 H5.
    inst H7 with n1 = V, n2 = V'.
    cut H8.
    exists (Nu' V'). split. search.
    unfold 3.
    exists (mon/app
      (mon/app
         ((x\mon/fun (c\mon/app (mon/force c) x)) ( V'))
         (mon/thunk (mon/fun (x\mon/fun (h\Nu' x)))))
      (mon/thunk (mon/fun (y\mon/case y Ms')))).
    split. search.
    unfold 3.
    exists (mon/app
      (((c\mon/app (mon/force c) V'))
         (mon/thunk (mon/fun (x\mon/fun (h\Nu' x)))))
      (mon/thunk (mon/fun (y\mon/case y Ms')))).
    split. search.
    unfold 3.
    exists mon/app
      (mon/app (((mon/fun (x\mon/fun (h\Nu' x))))) V')
      (mon/thunk (mon/fun (y\mon/case y Ms'))).
    split. search.
    unfold 3.
    exists mon/app (((x\mon/fun (h\Nu' x))) V')
      (mon/thunk (mon/fun (y\mon/case y Ms'))).
    search.
  % handle E[op V] H ~> Hop V {\x. handle E[ret x] H}
    case H1. apply eff2mon/unplug to H3 H7. case H10.
    apply eff2mon/hoisting to H5 H9.
    apply mon/pluggable to H13. inst H14 with n1 = n2.
    apply eff2mon/plug to H4 H9 _ H15 with L = eff2mon/value n1 n2 :: nil.
    apply eff2mon/get-opcase to H6 H8.
    apply eff2mon/get-opcase/unique to H6 H8 H17.
    inst H18 with
        n1 = V,
        n2 = V',
        n3 = eff/thunk (eff/fun (x\eff/handle (ER x) H)),
        n4 = mon/thunk (mon/fun (x\ (mon/app (mon/app (
    (mon/reify (ER1 x x) (mon/mon (x\ mon/fun c\ mon/app (mon/force c) x) (m\ f\ mon/fun c\ (mon/app (mon/force m) (mon/thunk (mon/fun y\ (mon/app (mon/app (mon/force f) y) c)))))) )
    ) (mon/thunk (mon/fun x\ (mon/fun h\ (Nu' x))))) (mon/thunk (mon/fun y\ mon/case y Ms'))))).
    cut H19.
    exists ((M'2 V'
            (mon/thunk
               (mon/fun
                  (x\mon/app
                       (mon/app
                          (mon/reify (ER1 x x)
                             (mon/mon
                                (x1\mon/fun (c\mon/app (mon/force c) x1))
                                (m\f\mon/fun
                                       (c\mon/app (mon/force m)
                                            (mon/thunk
                                               (mon/fun
                                                  (y\mon/app
                                                       (mon/app (mon/force f)
                                                          y)
                                                       c)))))))
                          (mon/thunk (mon/fun (x1\mon/fun (h\Nu' x1)))))
                       (mon/thunk (mon/fun (y\mon/case y Ms')))))))).
    split. search.
    unfold 3.
    exists (mon/app
      (mon/app
         (
            (m\f\mon/fun
                      (c\mon/app (mon/force m)
                           (mon/thunk
                              (mon/fun
                                 (y\mon/app (mon/app (mon/force f) y) c)))))
              (mon/thunk (mon/fun
               (k\mon/fun
                    (h\mon/app (mon/force h)
                         (mon/inj (lbl X)
                            (mon/pair V'
                               (mon/thunk
                                  (mon/fun
                                     (y\mon/app (mon/app (mon/force k) y) h)))))))))
              (mon/thunk (mon/fun (x\ mon/reify (ER1 x x) (mon/mon (x\mon/fun (c\mon/app (mon/force c) x))
               (m\f\mon/fun
                      (c\mon/app (mon/force m)
                           (mon/thunk
                              (mon/fun
                                 (y\mon/app (mon/app (mon/force f) y) c)))))))))
        )
         (mon/thunk (mon/fun (x\mon/fun (h\Nu' x)))))
      (mon/thunk (mon/fun (y\mon/case y Ms')))).
    split. search.
    unfold 3.
    exists mon/app
      (
         (
            (c\mon/app
                 (mon/force
                    (mon/thunk
                       (mon/fun
                          (k\mon/fun
                               (h\mon/app (mon/force h)
                                    (mon/inj (lbl X)
                                       (mon/pair V'
                                          (mon/thunk
                                             (mon/fun
                                                (y\mon/app
                                                     (mon/app (mon/force k) y)
                                                     h))))))))))
                 (mon/thunk
                    (mon/fun
                       (y\mon/app
                            (mon/app
                               (mon/force
                                  (mon/thunk
                                     (mon/fun
                                        (x\mon/reify (ER1 x x)
                                             (mon/mon
                                                (x1\mon/fun
                                                      (c1\mon/app
                                                            (mon/force c1) x1))
                                                (m\f\mon/fun
                                                       (c1\mon/app
                                                             (mon/force m)
                                                             (mon/thunk
                                                                (mon/fun
                                                                   (y1\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y1) c1))))))))))
                               y)
                            c)))))
         (mon/thunk (mon/fun (x\mon/fun (h\Nu' x)))))
      (mon/thunk (mon/fun (y\mon/case y Ms'))).
    split. search.
    unfold 3.
    exists (mon/app
      (mon/app
         (
            (
               (mon/fun
                  (k\mon/fun
                       (h\mon/app (mon/force h)
                            (mon/inj (lbl X)
                               (mon/pair V'
                                  (mon/thunk
                                     (mon/fun
                                        (y\mon/app (mon/app (mon/force k) y)
                                             h))))))))))
         (mon/thunk
            (mon/fun
               (y\mon/app
                    (mon/app
                       (mon/force
                          (mon/thunk
                             (mon/fun
                                (x\mon/reify (ER1 x x)
                                     (mon/mon
                                        (x1\mon/fun
                                              (c1\mon/app (mon/force c1) x1))
                                        (m\f\mon/fun
                                               (c1\mon/app (mon/force m)
                                                     (mon/thunk
                                                        (mon/fun
                                                           (y1\mon/app
                                                                 (mon/app
                                                                    (mon/force
                                                                    f) y1)
                                                                 c1))))))))))
                       y)
                    (mon/thunk (mon/fun (x\mon/fun (h\Nu' x))))))))
      (mon/thunk (mon/fun (y\mon/case y Ms')))).
    split. search.
    unfold 3.
    exists mon/app
      (
         (
            (k\mon/fun
                 (h\mon/app (mon/force h)
                      (mon/inj (lbl X)
                         (mon/pair V'
                            (mon/thunk
                               (mon/fun
                                  (y\mon/app (mon/app (mon/force k) y) h))))))))
         (mon/thunk
            (mon/fun
               (y\mon/app
                    (mon/app
                       (mon/force
                          (mon/thunk
                             (mon/fun
                                (x\mon/reify (ER1 x x)
                                     (mon/mon
                                        (x1\mon/fun
                                              (c1\mon/app (mon/force c1) x1))
                                        (m\f\mon/fun
                                               (c1\mon/app (mon/force m)
                                                     (mon/thunk
                                                        (mon/fun
                                                           (y1\mon/app
                                                                 (mon/app
                                                                    (mon/force
                                                                    f) y1)
                                                                 c1))))))))))
                       y)
                    (mon/thunk (mon/fun (x\mon/fun (h\Nu' x))))))))
      (mon/thunk (mon/fun (y\mon/case y Ms'))).
    split. search.
    unfold 3.
    exists (
      (
         (h\mon/app (mon/force h)
              (mon/inj (lbl X)
                 (mon/pair V'
                    (mon/thunk
                       (mon/fun
                          (y\mon/app
                               (mon/app
                                  (mon/force
                                     (mon/thunk
                                        (mon/fun
                                           (y1\mon/app
                                                 (mon/app
                                                    (mon/force
                                                       (mon/thunk
                                                          (mon/fun
                                                             (x\mon/reify
                                                                  (ER1 x x)
                                                                  (mon/mon
                                                                    (x1\
                                                                    mon/fun
                                                                    (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    c1) x1))
                                                                    (m\f\mon/fun
                                                                    (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    m)
                                                                    (mon/thunk
                                                                    (mon/fun
                                                                    (y2\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y2) c1))))))))))
                                                    y1)
                                                 (mon/thunk
                                                    (mon/fun
                                                       (x\mon/fun (h1\Nu' x))))))))
                                  y)
                               h)))))))
      (mon/thunk (mon/fun (y\mon/case y Ms')))).
    split. search.
    unfold 3.
    exists (mon/app (((mon/fun (y\mon/case y Ms'))))
      (mon/inj (lbl X)
         (mon/pair V'
            (mon/thunk
               (mon/fun
                  (y\mon/app
                       (mon/app
                          (mon/force
                             (mon/thunk
                                (mon/fun
                                   (y1\mon/app
                                         (mon/app
                                            (mon/force
                                               (mon/thunk
                                                  (mon/fun
                                                     (x\mon/reify (ER1 x x)
                                                          (mon/mon
                                                             (x1\mon/fun
                                                                   (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    c1) x1))
                                                             (m\f\mon/fun
                                                                    (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    m)
                                                                    (mon/thunk
                                                                    (mon/fun
                                                                    (y2\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y2) c1))))))))))
                                            y1)
                                         (mon/thunk
                                            (mon/fun (x\mon/fun (h1\Nu' x))))))))
                          y)
                       (mon/thunk (mon/fun (y1\mon/case y1 Ms'))))))))).
    split. search.
    unfold 3.
    exists (((y\mon/case y Ms'))
      (mon/inj (lbl X)
         (mon/pair V'
            (mon/thunk
               (mon/fun
                  (y\mon/app
                       (mon/app
                          (mon/force
                             (mon/thunk
                                (mon/fun
                                   (y1\mon/app
                                         (mon/app
                                            (mon/force
                                               (mon/thunk
                                                  (mon/fun
                                                     (x\mon/reify (ER1 x x)
                                                          (mon/mon
                                                             (x1\mon/fun
                                                                   (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    c1) x1))
                                                             (m\f\mon/fun
                                                                    (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    m)
                                                                    (mon/thunk
                                                                    (mon/fun
                                                                    (y2\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y2) c1))))))))))
                                            y1)
                                         (mon/thunk
                                            (mon/fun (x\mon/fun (h1\Nu' x))))))))
                          y)
                       (mon/thunk (mon/fun (y1\mon/case y1 Ms'))))))))).
    split. search.
    unfold 3.
    exists ((p\mon/split p M'2) (mon/pair V'
            (mon/thunk
               (mon/fun
                  (y\mon/app
                       (mon/app
                          (mon/force
                             (mon/thunk
                                (mon/fun
                                   (y1\mon/app
                                         (mon/app
                                            (mon/force
                                               (mon/thunk
                                                  (mon/fun
                                                     (x\mon/reify (ER1 x x)
                                                          (mon/mon
                                                             (x1\mon/fun
                                                                   (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    c1) x1))
                                                             (m\f\mon/fun
                                                                    (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    m)
                                                                    (mon/thunk
                                                                    (mon/fun
                                                                    (y2\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y2) c1))))))))))
                                            y1)
                                         (mon/thunk
                                            (mon/fun (x\mon/fun (h1\Nu' x))))))))
                          y)
                       (mon/thunk (mon/fun (y1\mon/case y1 Ms')))))))).
    split. search.
    unfold 3.
    exists (M'2 V' (mon/thunk
            (mon/fun
               (y\mon/app
                    (mon/app
                       (mon/force
                          (mon/thunk
                             (mon/fun
                                (y1\mon/app
                                      (mon/app
                                         (mon/force
                                            (mon/thunk
                                               (mon/fun
                                                  (x\mon/reify (ER1 x x)
                                                       (mon/mon
                                                          (x1\mon/fun
                                                                (c1\mon/app
                                                                    (mon/force
                                                                    c1) x1))
                                                          (m\f\mon/fun
                                                                 (c1\
                                                                    mon/app
                                                                    (mon/force
                                                                    m)
                                                                    (mon/thunk
                                                                    (mon/fun
                                                                    (y2\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y2) c1))))))))))
                                         y1)
                                      (mon/thunk
                                         (mon/fun (x\mon/fun (h1\Nu' x))))))))
                       y)
                    (mon/thunk (mon/fun (y1\mon/case y1 Ms'))))))).
    split. search.
    unfold 2.
    exists (red\ (M'2 V'
      (mon/thunk
         (mon/fun
            (y\mon/app
                 (red y)
                 (mon/thunk (mon/fun (y1\mon/case y1 Ms')))))))).
    exists y\ mon/app
                    (mon/force
                       (mon/thunk
                          (mon/fun
                             (y1\mon/app
                                   (mon/app
                                      (mon/force
                                         (mon/thunk
                                            (mon/fun
                                               (x\mon/reify (ER1 x x)
                                                    (mon/mon
                                                       (x1\mon/fun
                                                             (c1\mon/app
                                                                   (mon/force
                                                                    c1)
                                                                   x1))
                                                       (m\f\mon/fun
                                                              (c1\mon/app
                                                                    (mon/force
                                                                    m)
                                                                    (mon/thunk
                                                                    (mon/fun
                                                                    (y2\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y2) c1))))))))))
                                      y1)
                                   (mon/thunk
                                      (mon/fun (x\mon/fun (h1\Nu' x))))))))
                    y.
    exists x\ mon/app
                    (mon/reify (ER1 x x)
                       (mon/mon (x1\mon/fun (c\mon/app (mon/force c) x1))
                          (m\f\mon/fun
                                 (c\mon/app (mon/force m)
                                      (mon/thunk
                                         (mon/fun
                                            (y\mon/app
                                                 (mon/app (mon/force f) y) c)))))))
                    (mon/thunk (mon/fun (x1\mon/fun (h\Nu' x1)))).
    split. search.
    intros.
    unfold 3.
    exists mon/app
      (
         (
            (mon/fun
               (y1\mon/app
                     (mon/app
                        (mon/force
                           (mon/thunk
                              (mon/fun
                                 (x\mon/reify (ER1 x x)
                                      (mon/mon
                                         (x1\mon/fun
                                               (c1\mon/app (mon/force c1) x1))
                                         (m\f\mon/fun
                                                (c1\mon/app (mon/force m)
                                                      (mon/thunk
                                                         (mon/fun
                                                            (y2\mon/app
                                                                  (mon/app
                                                                    (mon/force
                                                                    f) y2)
                                                                  c1))))))))))
                        y1)
                     (mon/thunk (mon/fun (x\mon/fun (h1\Nu' x))))))))
      y.
    split. search.
    unfold 3.
    exists (
      (
         (y1\mon/app
               (mon/app
                  (mon/force
                     (mon/thunk
                        (mon/fun
                           (x\mon/reify (ER1 x x)
                                (mon/mon
                                   (x1\mon/fun (c1\mon/app (mon/force c1) x1))
                                   (m\f\mon/fun
                                          (c1\mon/app (mon/force m)
                                                (mon/thunk
                                                   (mon/fun
                                                      (y2\mon/app
                                                            (mon/app
                                                               (mon/force f)
                                                               y2)
                                                            c1))))))))))
                  y1)
               (mon/thunk (mon/fun (x\mon/fun (h1\Nu' x))))))
      y).
    split. search.
    unfold 3.
    exists (mon/app
      (mon/app
         (
            (
               (mon/fun
                  (x\mon/reify (ER1 x x)
                       (mon/mon (x1\mon/fun (c1\mon/app (mon/force c1) x1))
                          (m\f\mon/fun
                                 (c1\mon/app (mon/force m)
                                       (mon/thunk
                                          (mon/fun
                                             (y2\mon/app
                                                   (mon/app (mon/force f) y2)
                                                   c1))))))))))
         y)
      (mon/thunk (mon/fun (x\mon/fun (h1\Nu' x))))).
    search.
    search.

Theorem eff2mon/correctness : forall M1 M2 M1',
    {eff2mon/comp M1 M1'} -> {eff/step M1 M2} -> 
    exists M2', {eff2mon/comp M2 M2'} /\ mon/cong M1' M2'.
intros. case H2.
    apply eff2mon/unplug to H3 H1.
    apply eff2mon/reduce to H7 H4.
    apply mon/plug/cong to H8 H10.
    apply eff2mon/plug to H5 H6 H9 H11 with L = nil.
    search.
