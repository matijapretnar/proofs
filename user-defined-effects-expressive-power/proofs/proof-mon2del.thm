Specification "mon2del".
Import "lemmas-del".

Theorem mon2del/hoisting : forall E E',
    {mon/hoisting E} -> {mon2del/evctx E E'} -> {del/hoisting E'}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.

Theorem mon2del/unplug : forall E M EM EM',
    {mon/plug E M EM} -> {mon2del/comp EM EM'} ->
    exists E' M', {mon2del/evctx E E'} /\ {mon2del/comp M M'} /\ {del/plug E' M' EM'}.
induction on 1. intros. case H1.
    search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.

Theorem mon2del/plug : forall L E M EM E' M' EM',
    {mon/plug E M EM} -> {mon2del/evctx E E'} -> {L |- mon2del/comp M M'} ->
    {del/plug E' M' EM'} -> {L |- mon2del/comp EM EM'}.
induction on 2. intros. case H2.
    case H1. case H4. search.
    case H1. case H4. apply IH to H7 H5 H3 H8. search.
    case H1. case H4. apply IH to H7 H5 H3 H8. search.
    case H1. case H4. apply IH to H6 H5 H3 H7. search.
    case H1. case H4. apply IH to H6 H5 H3 H7. search.
    case H1. case H4. case H9. apply IH to H8 H5 H3 H10. search.

Theorem mon2del/get-case : forall Ms L M Ms',
    {mon/get-case Ms L M} -> {mon2del/cases Ms Ms'} ->
    exists M', {del/get-case Ms' L M'}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H4 H5. search.

Theorem mon2del/get-case/unique : forall Ms L M Ms' M',
    {mon/get-case Ms L M} -> {mon2del/cases Ms Ms'} ->
    {del/get-case Ms' L M'} -> {pi x\ pi x'\ mon2del/value x x' => mon2del/comp (M x) (M' x')}.
induction on 1. intros.
assert forall N, {apart N N} -> false.
    induction on 1. intros. case H4. apply IH1 to H5.
case H2.
    case H1.
    case H1.
        case H3.
            search.
            case H7. apply H4 to H9.
        case H3.
            case H7. apply H4 to H9.
            apply IH to H8 H5 H10. search.

Theorem mon2del/reduce : forall M1 M2 M1',
    {mon2del/comp M1 M1'} -> {mon/reduce M1 M2} ->
    exists M2', {mon2del/comp M2 M2'} /\ del/cong M1' M2'.
induction on 2. intros. case H2.
% split (pair V1 V2) M ~> M V1 V2
    case H1. case H3.
    inst H4 with n1 = V1, n2 = V2, n3 = V1', n4 = V2'.
    cut H7. search.
% case (inj V) Ms ~> M V
    case H1. case H4.
    apply mon2del/get-case to H3 H5.
    apply mon2del/get-case/unique to H3 H5 H7.
    inst H8 with n1 = V, n2 = V'1.
    cut H9. search.
% force (thunk M) ~> M
    case H1. case H3.
    search.
% bind (ret V) N ~> N V
    case H1. case H3. inst H4 with n1 = V, n2 = V'.
    cut H6. search.
% app (fun M) V ~> M V
    case H1. case H3. inst H5 with n1 = V, n2 = V'.
    cut H6. search.
% prj1 (comppair M1 M2) ~> M1
    case H1. case H3. search.
% prj2 (comppair M1 M2) ~> M2
    case H1. case H3. search.
% reify (ret V) (mon Nu Nb) ~> Nu V
    case H1. case H3. inst H4 with n1 = V, n2 = V'.
    cut H7. search 6.
% reify H[reflect M T] T ~> Nb {M} {\x. reify H[ret x] T}
    case H1. apply mon2del/unplug to H3 H6. case H10.
    apply mon2del/hoisting to H4 H9.
    apply del/pluggable to H13. inst H14 with n1 = n2.
    apply mon2del/plug to H5 H9 _ H15 with L = mon2del/value n1 n2 :: nil.
    inst H8 with
        n1 = (mon/thunk N),
        n2 = (mon/thunk (mon/fun (x\mon/reify (ER x) (mon/mon Nu Nb)))),
        n3 = (del/thunk M'2),
        n4 = (del/thunk (del/fun (x\del/app (del/reset (ER1 x x) (x\ del/fun nb\ Nu' x)) (del/thunk (del/fun x\ del/fun k\ Nb' x k))))).
    cut H17.
    exists (Nb' (del/thunk M'2)
            (del/thunk
               (del/fun
                  (x\del/app (del/reset (ER1 x x) (x1\del/fun (nb\Nu' x1)))
                       (del/thunk (del/fun (x1\del/fun (k\Nb' x1 k)))))))).
    split. search.
    unfold 3.
    exists
      (k\Nb' (del/thunk M'2) k)
      (del/thunk
         (del/fun
            (y\del/app
                 (del/app
                    (del/force
                       (del/thunk
                          (del/fun
                             (x\del/reset (ER1 x x) (x1\del/fun (nb1\Nu' x1))))))
                    y)
                 (del/thunk (del/fun (x\del/fun (k\Nb' x k))))))).
    split. search 10.
    unfold 3.
    exists
      (Nb' (del/thunk M'2)
      (del/thunk
         (del/fun
            (y\del/app
                 (del/app
                          (del/fun
                             (x\del/reset (ER1 x x) (x1\del/fun (nb1\Nu' x1))))
                    y)
                 (del/thunk (del/fun (x\del/fun (k\Nb' x k)))))))).
    split.
    backchain del/cong/plain.
        exists
           red\ (Nb' (del/thunk M'2)
              (del/thunk
                 (del/fun
                    (y\del/app
                         (del/app
                            red
                            y)
                         (del/thunk (del/fun (x\del/fun (k\Nb' x k)))))))).
           search.
    unfold 2.
    exists
      red\ Nb' (del/thunk M'2)
      (del/thunk
         (del/fun red)).
    search.

Theorem mon2del/correctness : forall M1 M2 M1',
    {mon2del/comp M1 M1'} -> {mon/step M1 M2} -> 
    exists M2', {mon2del/comp M2 M2'} /\ del/cong M1' M2'.
intros. case H2.
    apply mon2del/unplug to H3 H1.
    apply mon2del/reduce to H7 H4.
    apply del/plug/cong to H8 H10.
    apply mon2del/plug to H5 H6 H9 H11 with L = nil.
    search.
