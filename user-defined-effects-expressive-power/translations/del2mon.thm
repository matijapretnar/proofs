Specification "del2mon".

Define mon/cong : mon/comp -> mon/comp -> prop by
    mon/cong M M' := {mon/step M M'};
    mon/cong CM CM' := exists C (M : mon/value -> mon/comp) M', CM = C M /\ (forall y, mon/cong (M y) (M' y)) /\ C M' = CM';
    mon/cong M1 M3 := exists M2, mon/cong M1 M2 /\ mon/cong M2 M3.

Theorem mon/cong/plain : forall CM CM',
  (exists C M M', CM = C M /\ mon/cong M M' /\ C M' = CM') -> mon/cong CM CM'.
intros. case H1. unfold 2. exists m\ C (m mon/unit), x\ M, x\ M'. search.

Define ctx : olist -> prop by
    ctx nil;
    nabla x x', ctx (del2mon/value x x' :: L) := ctx L.

Define del/fresh : del/value -> prop,
       mon/fresh : mon/value -> prop by
    nabla x, del/fresh x;
    nabla x, mon/fresh x.

Theorem ctx-member : forall L F,
    ctx L -> member F L ->
    exists X X', (F = del2mon/value X X') /\ del/fresh X /\ mon/fresh X'.
induction on 2. intros. case H2.
    case H1. exists n1, n2. search.
    case H1. apply IH to H4 H3. exists (X n2 n1), (X' n2 n1). search.

Theorem member-prune : forall L E, nabla (x : del/value) (x' : mon/value),
    member (E x x') L -> exists F, E = x\ x'\ F.
induction on 1. intros. case H1.
    search.
    apply IH to H2. search.

Theorem ctx-unique : forall L X X' X'',
    ctx L -> member (del2mon/value X X') L -> member (del2mon/value X X'') L -> X' = X''.
induction on 1. intros. case H1.
    case H2.
    case H2.
        case H3.
            search.
            apply member-prune to H5.
        case H3.
            apply member-prune to H5.
            apply IH to H4 H5 H6. search.

Theorem del2mon/nat-unique : forall L N N' N'',
    ctx L -> {L |- del2mon/nat N N'} -> {L |- del2mon/nat N N''} -> N' = N''.
induction on 2. intros. case H2.
    case H3. search.
    apply ctx-member to H1 H5. case H4.
    case H3. apply IH to H1 H4 H5. search.
    apply ctx-member to H1 H6. case H5.
    apply ctx-member to H1 H5. case H4.

Theorem del2mon/label-unique : forall L N N' N'',
    ctx L -> {L |- del2mon/label N N'} -> {L |- del2mon/label N N''} -> N' = N''.
intros.
    case H2.
        case H3.
            apply del2mon/nat-unique to H1 H4 H5. search.
            apply ctx-member to H1 H6. case H5.
    apply ctx-member to H1 H5. case H4.

Theorem del2mon/cases-unique : forall L N N' N'',
    ctx L -> {L |- del2mon/label N N'} -> {L |- del2mon/label N N''} -> N' = N''.
intros.
    case H2.
        case H3.
            apply del2mon/nat-unique to H1 H4 H5. search.
            apply ctx-member to H1 H6. case H5.
    apply ctx-member to H1 H5. case H4.

Theorem del2mon-unique :
    (forall L V V' V'', ctx L -> {L |- del2mon/value V V'} -> {L |- del2mon/value V V''} -> V' = V'') /\
    (forall L M M' M'', ctx L -> {L |- del2mon/comp M M'} -> {L |- del2mon/comp M M''} -> M' = M'') /\
    (forall L Ms Ms' Ms'', ctx L -> {L |- del2mon/cases Ms Ms'} -> {L |- del2mon/cases Ms Ms''} -> Ms' = Ms'').
induction on 2 2 2. split.
% value
intros. case H2.
    % unit
    case H3. search.
    apply ctx-member to H1 H5. case H4. case H6.
    % pair
    case H3. apply IH to H1 H4 H6. apply IH to H1 H5 H7. search.
    apply ctx-member to H1 H7. case H6. case H8.
    % inj
    case H3. apply del2mon/label-unique to H1 H4 H6. apply IH to H1 H5 H7. search.
    apply ctx-member to H1 H7. case H6. case H8.
    % thunk
    case H3. apply IH1 to H1 H4 H5. search.
    apply ctx-member to H1 H6. case H5. case H7.
    % backchain
    apply ctx-member to H1 H5. case H4. case H3.
        case H6. case H6. case H6. case H6.
        apply ctx-member to H1 H9. case H8. apply ctx-unique to H1 H5 H9. search.

% comp
intros. case H2.
    % ret
    case H3. apply IH to H1 H4 H5. search.
    apply ctx-member to H1 H6. case H5.
    % fun
    case H3. apply IH1 to _ H4 H5. search.
    apply ctx-member to H1 H6. case H5.
    % split
    case H3. apply IH to H1 H4 H6. apply IH1 to _ H5 H7. search.
    apply ctx-member to H1 H7. case H6.
    % case
    case H3. apply IH to H1 H4 H6. apply IH2 to _ H5 H7. search.
    apply ctx-member to H1 H7. case H6.
    % force
    case H3. apply IH to H1 H4 H5. search.
    apply ctx-member to H1 H6. case H5.
    % bind
    case H3. apply IH1 to H1 H4 H6. apply IH1 to _ H5 H7. search.
    apply ctx-member to H1 H7. case H6.
    % app
    case H3. apply IH1 to H1 H4 H6. apply IH to H1 H5 H7. search.
    apply ctx-member to H1 H7. case H6.
    % reify
    case H3. apply IH1 to H1 H4 H6. apply IH1 to _ H5 H7. search.
    apply ctx-member to H1 H7. case H6.
    % reflect
    case H3. apply IH1 to _ H4 H5. search.
    apply ctx-member to H1 H6. case H5.
    % backchain
    apply ctx-member to H1 H5. case H4.

% cases
intros. case H2.
    % nil
    case H3. search.
    apply ctx-member to H1 H5. case H4.
    % cons
    case H3. apply IH2 to H1 H4 H7. apply del2mon/label-unique to H1 H5 H8. apply IH1 to _ H6 H9. search.
    apply ctx-member to H1 H8. case H7.
    % backchain
    apply ctx-member to H1 H5. case H4.

Split del2mon-unique as del2mon/value-unique, del2mon/comp-unique.

Theorem del2mon/evctx-unique : forall E E' E'',
    {del2mon/evctx E E'} -> {del2mon/evctx E E''} -> E' = E''.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H5. apply del2mon/comp-unique to _ H4 H6. search.
    case H2. apply IH to H3 H5. apply del2mon/value-unique to _ H4 H6. search.
    case H2. apply IH to H3 H5. apply del2mon/comp-unique to _ H4 H6. search.

Theorem del2mon/hoisting : forall E E',
    {del/hoisting E} -> {del2mon/evctx E E'} -> {mon/hoisting E'}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.

Theorem del2mon/unplug : forall E M EM EM',
    {del/plug E M EM} -> {del2mon/comp EM EM'} ->
    exists E' M', {del2mon/evctx E E'} /\ {del2mon/comp M M'} /\ {mon/plug E' M' EM'}.
induction on 1. intros. case H1.
    exists mon/hole, EM'. search.
    case H2. apply IH to H3 H4. exists (mon/evctx/bind E' N'), M'1. search.
    case H2. apply IH to H3 H4. exists (mon/evctx/app E' V'), M'1.  search.
    case H2. apply IH to H3 H4. exists (mon/evctx/app (mon/evctx/reify E' (mon/mon (x\ mon/fun c\ mon/app (mon/force c) x) (m\ f\ mon/fun c\ mon/app (mon/force m) (mon/thunk (mon/fun y\ mon/app (mon/app (mon/force f) y) c))))) (mon/thunk (mon/fun N'))), M'1. search.

Theorem mon/pluggable : forall E, {mon/hoisting E} -> exists ER, {pi x\ mon/plug E (mon/ret x) (ER x)}.
induction on 1. intros. case H1.
    exists x\ mon/ret x. search.
    apply IH to H2. exists x\ (mon/bind (ER x x) X). search.
    apply IH to H2. exists x\ (mon/app (ER x x) X). search.

Theorem del2mon/plug : forall L E M EM E' M' EM',
    {del/plug E M EM} -> {del2mon/evctx E E'} -> {L |- del2mon/comp M M'} ->
    {mon/plug E' M' EM'} -> {L |- del2mon/comp EM EM'}.
induction on 2. intros. case H2.
    case H1. case H4. search.
    case H1. case H4. apply IH to H7 H5 H3 H8. search.
    case H1. case H4. apply IH to H7 H5 H3 H8. search.
    case H1. case H4. case H8. apply IH to H7 H5 H3 H9. search.

Theorem del2mon/apart : forall N1 N2 N1' N2',
    {del/apart N1 N2} -> {del2mon/nat N1 N1'} -> {del2mon/nat N2 N2'} -> {mon/apart N1' N2'}.
induction on 1. intros. case H1.
    case H2. case H3. search.
    case H2. case H3. search.
    case H2. case H3. apply IH to H4 H5 H6. search.

Theorem del2mon/label/apart : forall L1 L2 L1' L2',
    {del/label/apart L1 L2} -> {del2mon/label L1 L1'} -> {del2mon/label L2 L2'} ->
    {mon/label/apart L1' L2'}.
intros. case H1. case H2. case H3. apply del2mon/apart to H4 H5 H6. search.

Theorem del2mon/get-case : forall Ms L M Ms' L',
    {del/get-case Ms L M} -> {del2mon/cases Ms Ms'} -> {del2mon/label L L'} ->
    exists M', {mon/get-case Ms' L' M'}.
induction on 1. intros. case H1.
    case H2. apply del2mon/label-unique to _ H3 H5. search.
    case H2.
        apply IH to H5 H6 H3. exists M'1.
        apply del2mon/label/apart to H4 H3 H7. search.

Theorem del2mon/get-case/unique : forall Ms L M Ms' L' M',
    {del/get-case Ms L M} -> {del2mon/cases Ms Ms'} -> {del2mon/label L L'} ->
    {mon/get-case Ms' L' M'} -> {pi x\ pi x'\ del2mon/value x x' => del2mon/comp (M x) (M' x')}.
induction on 1. intros.
assert forall N, {mon/apart N N} -> false.
    induction on 1. intros. case H5. apply IH1 to H6.
case H2.
    case H1.
    case H1.
        apply del2mon/label-unique to _ H3 H7.
        case H4.
            search.
            case H9. apply H5 to H11.
        case H4.
            apply del2mon/label/apart to H9 H3 H7. case H11. apply H5 to H12.
            apply IH to H10 H6 H3 H12. search.

Theorem del2mon/reduce : forall M1 M2 M1' M2',
    {del2mon/comp M1 M1'} -> {del2mon/comp M2 M2'} -> 
    {del/reduce M1 M2} -> mon/cong M1' M2'.
induction on 3. intros. case H3.
% split (pair V1 V2) M ~> M V1 V2
    case H1. case H4. inst H5 with n1 = V1, n2 = V2, n3 = V1', n4 = V2'.
    assert {del2mon/comp (M V1 V2) (M' V1' V2')}. cut H8. search.
    apply del2mon/comp-unique to _ H2 H9. search.
% case (inj V) Ms ~> M V
    case H1. case H5.
    apply del2mon/get-case to H4 H6 H7.
    apply del2mon/get-case/unique to H4 H6 H7 H9.
    inst H10 with n1 = V, n2 = V'1.
    cut H11. apply del2mon/comp-unique to _ H2 H12. search.
% force (thunk M) ~> M
    case H1. case H4.
    apply del2mon/comp-unique to _ H2 H5. search.
% bind (ret V) N ~> N V
    case H1. case H4. inst H5 with n1 = V, n2 = V'.
    assert {del2mon/comp (M V) (N' V')}. cut H7. search.
    apply del2mon/comp-unique to _ H2 H8. search.
% app (fun M) V ~> M V
    case H1. case H4. inst H6 with n1 = V, n2 = V'.
    assert {del2mon/comp (M V) (M'1 V')}. cut H7. search.
    apply del2mon/comp-unique to _ H2 H8. search.
% reify (ret V) (del Nu Nb) ~> Nu V
    case H1. case H4. inst H5 with n1 = V, n2 = V'.
    cut H7. apply del2mon/comp-unique to _ H2 H8.
    unfold 3.
    exists (mon/app
      ((x\mon/fun (c\mon/app (mon/force c) x)) V')
      (mon/thunk (mon/fun N'))).
    split. search.
    unfold 3.
    exists (c\mon/app (mon/force c) V') (mon/thunk (mon/fun N')).
    split. search.
    unfold 3.
    exists (mon/app (mon/fun N') V').
    search.
% reify H[reflect M T] T ~> Nb {M} {\x. reify H[ret x] T}
    case H1. apply del2mon/unplug to H4 H7. case H10.
    apply del2mon/hoisting to H5 H9.
    apply mon/pluggable to H13. inst H14 with n1 = n2.
    apply del2mon/plug to H6 H9 _ H15 with L = del2mon/value n1 n2 :: nil.
    inst H12 with
        n1 = (del/thunk (del/fun (x\del/reset (ER x) N))),
        n2 = (mon/thunk (mon/fun (x\(mon/app (mon/reify (ER1 x x) (mon/mon (x\ mon/fun c\ mon/app (mon/force c) x) (m\ f\ mon/fun c\ mon/app (mon/force m) (mon/thunk (mon/fun y\ mon/app (mon/app (mon/force f) y) c))))) (mon/thunk (mon/fun N')))))).
    cut H17.
    apply del2mon/comp-unique to _ H2 H18.
    unfold 3.
    exists
        mon/app
        %%%
            ((m\f\mon/fun
                                          (c\mon/app (mon/force m)
                                               (mon/thunk
                                                  (mon/fun
                                                     (y\mon/app (mon/app (mon/force f) y)
                                                          c)))))
                        (mon/thunk (mon/fun M'2))
                        (mon/thunk (mon/fun (x\ mon/reify (ER1 x x) (mon/mon (x\mon/fun (c\mon/app (mon/force c) x))
                       (m\f\mon/fun
                              (c\mon/app (mon/force m)
                                   (mon/thunk
                                      (mon/fun
                                         (y\mon/app (mon/app (mon/force f) y)
                                              c))))))))))
        %%%
                 (mon/thunk (mon/fun N')).
    split. search.
    unfold 3.
    exists 
         (c\mon/app (mon/force (mon/thunk (mon/fun M'2)))
              (mon/thunk
                 (mon/fun
                    (y\mon/app
                         (mon/app
                            (mon/force
                               (mon/thunk
                                  (mon/fun
                                     (x\mon/reify (ER1 x x)
                                          (mon/mon
                                             (x1\mon/fun
                                                   (c1\mon/app (mon/force c1)
                                                         x1))
                                             (m\f\mon/fun
                                                    (c1\mon/app (mon/force m)
                                                          (mon/thunk
                                                             (mon/fun
                                                                (y1\mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y1) c1))))))))))
                            y)
                         c))))
      (mon/thunk (mon/fun N')).
      split. search.
      unfold 3.
      exists mon/app (mon/fun M'2)
                 (mon/thunk
                    (mon/fun
                       (y\mon/app
                            (mon/app
                               (mon/force
                                  (mon/thunk
                                     (mon/fun
                                        (x\mon/reify (ER1 x x)
                                             (mon/mon
                                                (x1\mon/fun
                                                      (c1\mon/app
                                                            (mon/force c1) x1))
                                                (m\f\mon/fun
                                                       (c1\mon/app
                                                             (mon/force m)
                                                             (mon/thunk
                                                                (mon/fun
                                                                   (y1\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y1) c1))))))))))
                               y)
                            (mon/thunk (mon/fun N'))))).
    split. search.
    unfold 3.
    exists M'2
                 (mon/thunk
                    (mon/fun
                       (y\mon/app
                            (mon/app
                               (mon/force
                                  (mon/thunk
                                     (mon/fun
                                        (x\mon/reify (ER1 x x)
                                             (mon/mon
                                                (x1\mon/fun
                                                      (c1\mon/app
                                                            (mon/force c1) x1))
                                                (m\f\mon/fun
                                                       (c1\mon/app
                                                             (mon/force m)
                                                             (mon/thunk
                                                                (mon/fun
                                                                   (y1\
                                                                    mon/app
                                                                    (mon/app
                                                                    (mon/force
                                                                    f) y1) c1))))))))))
                               y)
                            (mon/thunk (mon/fun N'))))).
    split. search.
    unfold 2.
    exists red\ M'2 (mon/thunk (mon/fun (x\mon/app (red x) (mon/thunk (mon/fun N'))))).
    search.

Theorem plug/step : forall E M1 EM1 M2 EM2,
    {mon/plug E M1 EM1} -> {mon/plug E M2 EM2} -> {mon/step M1 M2} -> {mon/step EM1 EM2}.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H4 H5 H3. case H6. search.
    case H2. apply IH to H4 H5 H3. case H6. search.
    case H2. apply IH to H4 H5 H3. case H6. search.

Theorem plug/context : forall E, {mon/is-evctx E} -> exists E', forall M, {mon/plug E M (E' M)}.
induction on 1. intros. case H1.
    exists m\ m. intros. search.
    apply IH to H2. exists m\ mon/bind (E' m) N. intros.
    assert {mon/plug E1 M (E' M)}. apply H3 with M = M. search. search.
    apply IH to H2. exists m\ mon/app (E' m) V. intros.
    assert {mon/plug E1 M (E' M)}. apply H3 with M = M. search. search.
    apply IH to H2. exists m\ mon/reify (E' m) T. intros.
    assert {mon/plug E1 M (E' M)}. apply H3 with M = M. search. search.

Theorem plug/unique : forall E M EM EM',
    {mon/plug E M EM} -> {mon/plug E M EM'} -> EM = EM'.
induction on 1. intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.
    case H2. apply IH to H3 H4. search.

Theorem plug/is-evctx : forall E M EM, {mon/plug E M EM} -> {mon/is-evctx E}.
induction on 1. intros. case H1.
    search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.

Theorem plug/cong : forall E M1 EM1 M2 EM2,
    {mon/plug E M1 EM1} -> {mon/plug E M2 EM2} -> mon/cong M1 M2 -> mon/cong EM1 EM2.
intros.
    apply plug/context to _ with E = E.
        apply plug/is-evctx to H1. search.
    apply H4 with M = M1.
    apply H4 with M = M2.
    apply plug/unique to H1 H5. apply plug/unique to H2 H6.
    backchain mon/cong/plain.
    exists E', M1, M2. search.

Theorem del2mon/simulation : forall M1 M2 M1' M2',
    {del2mon/comp M1 M1'} -> {del2mon/comp M2 M2'} -> 
    {del/step M1 M2} -> mon/cong M1' M2'.
intros. case H3.
    apply del2mon/unplug to H4 H1.
    apply del2mon/unplug to H6 H2.
    apply del2mon/reduce to H8 H11 H5.
    apply del2mon/evctx-unique to H7 H10.
    apply plug/cong to H9 H12 H13.
    search.
