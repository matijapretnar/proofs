%%% Big step semantics preserves the small step semantics %%%

step/eval : step C C' -> eval C' R -> eval C R -> type.
step/eval-let : step C1 C1' -> eval (let C1' C2) R -> eval (let C1 C2) R -> type.
step/eval-with : step C2 C2' -> eval (with E C2') R -> eval (with E C2) R -> type.
%mode step/eval +C~>C' +C'=>R -C=>R.
%mode step/eval-let +C1~>C1' +C=>R -C'=>R.
%mode step/eval-with +C2~>C2' +C=>R -C'=>R.

- : step/eval step/cond-tru C'=>R (eval/cond-tru C'=>R).

- : step/eval step/cond-fls C'=>R (eval/cond-fls C'=>R).

- : step/eval step/mtch-zro C'=>R (eval/mtch-zro C'=>R).

- : step/eval step/mtch-suc C'=>R (eval/mtch-suc C'=>R).

- : step/eval step/app C'=>R (eval/app C'=>R).

- : step/eval step/let-val C'=>R (eval/let-val eval/val C'=>R).

- : step/eval step/let-op _ (eval/let-op eval/op).

- : step/eval (step/let-step C1~>C1') C'=>R C=>R
     <- step/eval-let C1~>C1' C'=>R C=>R.

- : step/eval step/letr C'=>R (eval/letr C'=>R).

- : step/eval step/letv C'=>R (eval/letv C'=>R).

- : step/eval step/with-val C'=>R (eval/with-val eval/val C'=>R).

- : step/eval (step/with-op CO) C'=>R (eval/with-op eval/op CO C'=>R).

- : step/eval (step/with-step C1~>C1') C'=>R C=>R
     <- step/eval-with C1~>C1' C'=>R C=>R.


- : step/eval-let C1~>C1' (eval/let-val C1'=>E C2E=>R) (eval/let-val C1=>E C2E=>R)
     <- step/eval C1~>C1' C1'=>E C1=>E.

- : step/eval-let C1~>C1' (eval/let-op C1'=>Op) (eval/let-op C1=>Op)
     <- step/eval C1~>C1' C1'=>Op C1=>Op.


- : step/eval-with C1~>C1' (eval/with-val C1'=>E C2E=>R) (eval/with-val C1=>E C2E=>R)
     <- step/eval C1~>C1' C1'=>E C1=>E.

- : step/eval-with C1~>C1' (eval/with-op C1'=>Op OC OC=>R) (eval/with-op C1=>Op OC OC=>R)
     <- step/eval C1~>C1' C1'=>Op C1=>Op.

%worlds () (step/eval _ _ _) (step/eval-let _ _ _) (step/eval-with _ _ _).
%total {(C~>C' C1~>C1' C2~>C2') (C'=>R C1C2~>R EC~>R)} (step/eval C~>C' C'=>R _) (step/eval-let C1~>C1' C1C2~>R _) (step/eval-with C2~>C2' EC~>R _).



%%% Reductions inside an evaluation context %%%

~>*-let-val : step* C1 (result/val E) -> step* (C2 E) R -> step* (let C1 C2) R -> type.
%mode ~>*-let-val +C1~>*E +C2E~>*R -C1C2~>*R.

- : ~>*-let-val step*/val C2E~>*R (step*/step step/let-val C2E~>*R).

- : ~>*-let-val (step*/step C1~>C1' C1'~*>E) C2E~>*R (step*/step (step/let-step C1~>C1') C1'C2~>*R)
     <- ~>*-let-val C1'~*>E C2E~>*R C1'C2~>*R.

%worlds () (~>*-let-val _ _ _).
%total {C1~>*E} (~>*-let-val C1~>*E _ _).


~>*-let-op : step* C1 (result/op IO E K) -> {C2} step* (let C1 C2) (result/op IO E ([x] let (K x) C2)) -> type.
%mode ~>*-let-op +C1~>*Op +C2 -C1C2~>*Op.

- : ~>*-let-op step*/op _ (step*/step step/let-op step*/op).

- : ~>*-let-op (step*/step C1~>C1' C1'~*>Op) C2 (step*/step (step/let-step C1~>C1') C1'C2~>*Op)
     <- ~>*-let-op C1'~*>Op C2 C1'C2~>*Op.

%worlds () (~>*-let-op _ _ _).
%total {C1~>*Op} (~>*-let-op C1~>*Op _ _).


~>*-with-val : step* C (result/val E) -> step* (Cv E) R -> {OCs} step* (with (hnd Cv OCs) C) R -> type.
%mode ~>*-with-val +C~>*E +CvE~>*R +OCs -HC~>*R.

- : ~>*-with-val step*/val CvE~>*R _ (step*/step step/with-val CvE~>*R).

- : ~>*-with-val (step*/step C~>C' C'~*>E) CvE~>*R OCs (step*/step (step/with-step C~>C') HC~>*R)
     <- ~>*-with-val C'~*>E CvE~>*R OCs HC~>*R.

%worlds () (~>*-with-val _ _ _ _).
%total {C~>*E} (~>*-with-val C~>*E _ _ _).


~>*-with-op :
  step* C (result/op IO E K)
  -> get-op-case IO OCs OC
  -> step* (OC E (fun ([y] with (hnd Cv OCs) (K y)))) R
  -> step* (with (hnd Cv OCs) C) R -> type.
%mode ~>*-with-op +C~>*Op +OC +OC~>*R -HC~>*R.

- : ~>*-with-op step*/op OC OC~>*R (step*/step (step/with-op OC) OC~>*R).

- : ~>*-with-op (step*/step C~>C' C'~>*Op) OC OC~>*R (step*/step (step/with-step C~>C') HC~>*R)
     <- ~>*-with-op C'~>*Op OC OC~>*R HC~>*R.

%worlds () (~>*-with-op _ _ _ _).
%total {C~>*Op} (~>*-with-op C~>*Op _ _ _).
