%%%%% Progress theorem %%%%%

progress : cof Sig C _ -> non-stuck Sig C -> type.
%mode progress +C -NS.

- : progress (cof/cond E _ _) NS
     <- progress-cond E _ _ NS.

- : progress (cof/mtch E _ _) NS
     <- progress-mtch E _ _ NS.

- : progress (cof/absd E) NS
     <- progress-absd _ E NS.

- : progress (cof/app E1 _) NS
     <- progress-app E1 _ NS.

- : progress (cof/val _) non-stuck/val.

- : progress (cof/op Ei _ _ _) NS
     <- progress-op Ei _ _ _ NS.

- : progress (cof/let C1 _) NS
     <- progress C1 NS1
     <- progress-let NS1 _ NS.

- : progress (cof/letr _ _) (non-stuck/step step/letr).

- : progress (cof/letv _ _) (non-stuck/step step/letv).

- : progress (cof/with E C) NS'
     <- progress C NS
     <- progress-with E C NS NS'.

- : progress (cof/sub C _) NS
     <- progress C NS.

%worlds () (progress _ _).
%total {C} (progress C _).
