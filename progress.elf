%%%%% Progress theorem %%%%%

progress : cof Sig C (_ ! D) -> non-stuck C D -> type.
%mode progress +C -NS.

- : progress (cof/cond E _ _) NS
     <- progress-cond _ E _ _ NS.

- : progress (cof/zro? E) NS
     <- progress-zro? _ E NS.

- : progress (cof/pred E) NS
     <- progress-pred _ E NS.

- : progress (cof/absd E) NS
     <- progress-absd _ E NS.

- : progress (cof/app E1 _) NS
     <- progress-app _ E1 _ NS.

- : progress (cof/val _) non-stuck/val.

- : progress (cof/op Ei _ _ _ ROinD) NS
     <- progress-op Ei _ _ ROinD NS.

- : progress (cof/let C1 _) NS
     <- progress C1 NS1
     <- progress-let NS1 _ NS.

- : progress (cof/letr _ _) (non-stuck/step ~>/letr).

- : progress (cof/letv _ _) (non-stuck/step ~>/letv).

- : progress (cof/with E C) NS'
     <- progress C NS
     <- progress-with E NS NS'.

- : progress (cof/sub C (<dt/! _ D<D')) NS'
     <- progress C NS
     <- non-stuck/<d NS D<D' NS'.

%worlds () (progress _ _).
%total {C} (progress C _).
