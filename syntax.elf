%%% Abstract syntax

% In addition to expressions "expr" and computations "comp", we introduce
% an auxiliary third type "op-cases" that represents a list of
% operation cases in handlers.

expr : type.
comp : type.
op-cases : type.
%name comp C.
%name expr E.
%name op-cases OCs.

% Abbreviations for handler cases
%abbrev val-case = expr -> comp.
%abbrev op-case = expr -> expr -> comp.
%name op-case OC.

tru : expr.                            % true
fls : expr.                            % false
zro : expr.                            % zero
suc : expr -> expr.                    % successor
unt : expr.                            % unit
fun : (expr -> comp) -> expr.          % function
ins : instance Eff -> expr.            % instance
hnd : val-case -> op-cases -> expr.    % handler

op-cases/nil  : op-cases.
op-cases/cons : expr -> opsym Eff -> op-case -> op-cases -> op-cases.

cond : expr -> comp -> comp -> comp.   % conditional statement
zro? : expr -> comp.                   % zero test
pred : expr -> comp.                   % predecessor
absd : expr -> comp.                   % eliminator for empty type
app  : expr -> expr -> comp.           % application
val  : expr -> comp.                   % injection of values into computations
op   : expr -> opsym Eff -> expr -> (expr -> comp) -> comp. % operation call
let  : comp -> (expr -> comp) -> comp. % let-binding
letv : expr -> (expr -> comp) -> comp. % polymorphic binding of values
letr : (expr -> expr -> comp) -> (expr -> comp) -> comp. % recursive definition
with : expr -> comp -> comp.           % handling construct



% Types are split into pure types "ty" and computation (dirty) types "dirty".

ty : type.
dirty : type.
%name ty A.
%name dirty B.
% Usually, we write underlined "C" and "D" for computation types.
% However, all variables in Twelf need to be capital letters,
% so "C" is already taken by computations, and "D" is convenient for dirts,
% thus we label dirty types by "B".

bool  : ty.                   % the type of booleans
nat   : ty.                   % the type of natural numbers
unit  : ty.                   % the unit type
empty : ty.                   % the empty type
-->   : ty -> dirty -> ty.    % the function type
inst  : region Eff -> ty.     % the type of instances of a given effect
==>   : dirty -> dirty -> ty. % the type of handlers
%infix right 50 -->.
%infix right 55 ==>.

! : ty -> dirt -> dirty.
%infix none 60 !.



