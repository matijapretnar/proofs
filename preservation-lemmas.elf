%%% Subcases of the preservation theorem %%%

% Like in the proof of the progress theorem, there are a couple of cases
% for which we need to perform further induction due to subtyping.

preservation-mtch : eof Sig E nat -> cof Sig C1 B
                     -> ({x} var x nat -> cof Sig (C2 x) B)
                     -> step Sig (mtch E C1 C2) C -> cof Sig C B -> type.
%mode preservation-mtch +E +C1 +C2 +S -C'.

- : preservation-mtch eof/zro C1 _ step/mtch-zro C1.

- : preservation-mtch (eof/suc E) _ C2 step/mtch-suc C2'
     <- subst C2 E C2'.

- : preservation-mtch (eof/sub E _) C1 C2 S C'
     <- preservation-mtch E C1 C2 S C'.

%worlds () (preservation-mtch _ _ _ _ _).
%total {E} (preservation-mtch E _ _ _ _).


preservation-app : eof Sig E1 (A --> B) -> eof Sig E2 A -> step Sig (app E1 E2) C -> cof Sig C B -> type.
%mode preservation-app +E1 +E2 +S -C.

- : preservation-app (eof/fun E1) E2 step/app E1'
     <- subst E1 E2 E1'.

- : preservation-app (eof/sub E1 (<t/--> A'<A B<B')) E2 S (cof/sub C B<B')
     <- preservation-app E1 (eof/sub E2 A'<A) S C.

%worlds () (preservation-app _ _ _ _).
%total {E1} (preservation-app E1 _ _ _).



%%% Preservation of handled operations %%%

% Preservation in case an operation appears in the outgoing dirt

preservation-with-op : sig Sig O A1 A2
                             -> eof Sig Ep A1 -> eof Sig K (A2 --> A')
                             -> get-op-case (I # O) OCs OC -> opcof Sig OCs A'
                             -> cof Sig (OC Ep K) A' -> type.
%mode preservation-with-op +O +Ep +K +OC +OCs -C'.

% When the first case matches.
- : preservation-with-op _ Ep K
     get-op-case/here
     (opcof/cons _ _ OC _)
     OC'
     <- subst2 OC Ep K OC'.

% When the first case does not match, but there are more cases,
% we continue as before.
- : preservation-with-op O Ep K
     (get-op-case/there OC _)
     (opcof/cons _ _ _ OCs)
     C'
     <- preservation-with-op O Ep K OC OCs C'.

% When there are no more cases, we propagate the operation call.
- : preservation-with-op O Ep K
     get-op-case/nil
     opcof/nil
     (cof/op eof/ins O Ep ([_] [x] cof/app K (eof/var x))).


%worlds () (preservation-with-op _ _ _ _ _ _).
%total {OC} (preservation-with-op _ _ _ OC _ _).
