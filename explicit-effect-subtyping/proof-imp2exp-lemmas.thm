Specification "imp2exp".
Import "common".
Close exp/val_ty, exp/comp_ty, exp/coer_ty.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Contexts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define i2e/ctxs : imp/sig -> exp/sig -> olist -> olist -> prop by
  i2e/ctxs Sig_s Sig_t nil nil := {i2e/sig Sig_s Sig_t};
  nabla x x', i2e/ctxs Sig_s Sig_t
    (i2e/poly_var Sig_s x Ps x' :: Ctx_s2t)
    (exp/of_val Sig_t x' At :: Ctx_t)
    := i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t /\ {Ctx_s2t |- i2e/poly_ty Ps At};
  nabla x x', i2e/ctxs Sig_s Sig_t
    (i2e/var Sig_s x As x' :: Ctx_s2t)
    (exp/of_val Sig_t x' At :: Ctx_t)
    := i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t /\ {Ctx_s2t |- i2e/val_ty As At};
  nabla t t', i2e/ctxs Sig_s Sig_t
    (i2e/val_ty t t' :: Ctx_s2t)
    Ctx_t
    := i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t;
  nabla s, i2e/ctxs Sig_s Sig_t
    (ground_skel s :: Ctx_s2t)
    Ctx_t
    := i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t;
  nabla w, i2e/ctxs Sig_s Sig_t
    (exp/of_coer w Pi :: Ctx_s2t)
    (exp/of_coer w Pi :: Ctx_t)
    := i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t;
  nabla t, i2e/ctxs Sig_s Sig_t
    (exp/skel_val_ty t S :: Ctx_s2t)
    (exp/skel_val_ty t S :: Ctx_t)
    := i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t.

Theorem i2e/ctx_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  member F Ctx_s2t -> (
    exists X Ps X' At,
    fresh X /\ fresh X' /\
    (F = i2e/poly_var Sig_s X Ps X') /\ {Ctx_s2t |- i2e/poly_ty Ps At} /\
    member (exp/of_val Sig_t X' At) Ctx_t
  ) \/ (
    exists X As X' At,
    fresh X /\ fresh X' /\
    (F = i2e/var Sig_s X As X') /\ {Ctx_s2t |- i2e/val_ty As At} /\
    member (exp/of_val Sig_t X' At) Ctx_t
  ) \/ (
    exists X X', fresh X /\ fresh X' /\ F = i2e/val_ty X X'
  ) \/ (
    exists X, fresh X /\ F = ground_skel X
  ) \/ (
    exists X Pi, fresh X /\ F = exp/of_coer X Pi /\ member (exp/of_coer X Pi) Ctx_t
  ) \/ (
    exists X S, fresh X /\ F = exp/skel_val_ty X S /\ member (exp/skel_val_ty X S) Ctx_t
  ).
induction on 1. intros Hctx Hmem. Hctx: case Hctx.
% empty context
case Hmem.
% poly_var
Hmem: case Hmem.
  % here
  search.
  % there
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% i2e/var
Hmem: case Hmem.
  % here
  search.
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% i2e/val_ty
Hmem: case Hmem.
  % here
  search.
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% ground_skel
Hmem: case Hmem.
  % here
  search.
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% of_coer
Hmem: case Hmem.
  % here
  search.
  % there
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% skel_val_ty
Hmem: case Hmem.
  % here
  search.
  % there
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.

Theorem i2e/comp_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/comp X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/skel_val_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- exp/skel_val_ty X1 X2} -> member F Ctx_s2t ->
  F = exp/skel_val_ty X1 X2 /\ fresh X1 /\ {Ctx_t |- exp/skel_val_ty X1 X2}.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H. search.

Theorem i2e/skel_comp_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- exp/skel_comp_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/comp_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/comp_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/hand_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4 X5 X6, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/hand X1 X2 X3 X4 X5 X6} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/poly_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/poly_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/poly_val_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F Vs Ps Vt, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/poly_val Sig_s Vs Ps Vt} -> member F Ctx_s2t ->
  exists At, {Ctx_s2t |- i2e/poly_ty Ps At} /\ {Ctx_t |- exp/of_val Sig_t Vt At}.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/poly_var_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F Vs Ps Vt, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/poly_var Sig_s Vs Ps Vt} -> member F Ctx_s2t ->
  exists At, {Ctx_s2t |- i2e/poly_ty Ps At} /\ {Ctx_t |- exp/of_val Sig_t Vt At}.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. search. case H. case H. case H. case H. case H.

Theorem i2e/qual_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/qual_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/qual_val_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/qual_val X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/qual_var_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/qual_var X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/val_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/val X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem i2e/val_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/val_ty X1 X2} -> member F Ctx_s2t ->
  F = i2e/val_ty X1 X2 /\ fresh X1.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. search. case H. case H. case H.

Theorem i2e/var_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F Vs As Vt, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/var Sig_s Vs As Vt} -> member F Ctx_s2t ->
  exists At, {Ctx_s2t |- i2e/val_ty As At} /\ {Ctx_t |- exp/of_val Sig_t Vt At}.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. search. case H. case H. case H. case H.

Theorem i2e/cnstr_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- i2e/cnstr X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply i2e/ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Uniqueness
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem member_nominal_absurd : forall L T, nabla x,
  member (i2e/val_ty x T) L -> false.
induction on 1. intros. case H1. apply IH to H2.

Theorem unique_ctx_i2e/ty :
  forall Sig_s Sig_t Ctx_s2t Ctx_t As At1 At2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  member (i2e/val_ty As At1) Ctx_s2t -> member (i2e/val_ty As At2) Ctx_s2t -> At1 = At2.
induction on 2. intros. case H2.
  case H3.
    search.
    case H1. apply member_nominal_absurd to H4.
  case H3.
    case H1. apply member_nominal_absurd to H4.
    case H1.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.

Theorem unique_i2e/ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t As At1 At2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- i2e/val_ty As At1} -> {Ctx_s2t |- i2e/val_ty As At2} -> At1 = At2
  )
  /\
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t As At1 At2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- i2e/comp_ty As At1} -> {Ctx_s2t |- i2e/comp_ty As At2} -> At1 = At2
  ).
induction on 2 2. split.

intros. case H2.
  % unit_ty
  case H3. search.
  Hfresh : apply i2e/val_ty_member to H1 H4 H5. case Hfresh.
  % fun_ty
  case H3. apply IH to H1 H4 H6. apply IH1 to H1 H5 H7. search.
  Hfresh : apply i2e/val_ty_member to H1 H6 H7. case Hfresh.
  % hand_ty
  case H3. apply IH1 to H1 H4 H6. apply IH1 to H1 H5 H7. search.
  Hfresh : apply i2e/val_ty_member to H1 H6 H7. case Hfresh.
  % in context
  Hfresh : apply i2e/val_ty_member to H1 H4 H5.
  case Hfresh. case H4. case H3.
  Hfresh : apply i2e/val_ty_member to H1 H6 H7.
  apply unique_ctx_i2e/ty to H1 H5 H7. search.

intros. case H2.
  % bang
  case H3. apply IH to H1 H4 H5. search.
  Hfresh : apply i2e/comp_ty_member to H1 H5 H6.
  % in context
  Hfresh : apply i2e/comp_ty_member to H1 H4 H5.

Split unique_i2e/ty as unique_i2e/val_ty, unique_i2e/comp_ty.

Theorem unique_i2e/cnstr :
  forall Sig_s Sig_t Ctx_s2t Ctx_t Pi Pi1 Pi2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- i2e/cnstr Pi Pi1} -> {Ctx_s2t |- i2e/cnstr Pi Pi2} -> Pi1 = Pi2.
intros. case H2.
  % val_ty_coer_ty
  case H3. apply unique_i2e/val_ty to H1 H4 H6. apply unique_i2e/val_ty to H1 H5 H7. search.
  apply i2e/cnstr_member to H1 H6 H7.
  % dirt_coer_ty
  case H3. search.
  apply i2e/cnstr_member to H1 H4 H5.
  % comp_ty_coer_ty
  case H3. apply unique_i2e/comp_ty to H1 H4 H6. apply unique_i2e/comp_ty to H1 H5 H7. search.
  apply i2e/cnstr_member to H1 H6 H7.
  % in context
  apply i2e/cnstr_member to H1 H4 H5.

Theorem strengthen_skel_ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t A S, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- exp/skel_val_ty A S} -> {Ctx_t |- exp/skel_val_ty A S}
  )
  /\
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t B S, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- exp/skel_comp_ty B S} -> {Ctx_t |- exp/skel_comp_ty B S}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  apply IH to H1 H3. search.
  apply IH to _ H3 with Ctx_t = exp/skel_val_ty n1 S1 :: Ctx_t. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply i2e/skel_val_ty_member to H1 H3 H4. case H3. search.
intros. case H2.
  apply IH to H1 H3. search.
  apply i2e/skel_comp_ty_member to H1 H3 H4.
Split strengthen_skel_ty as strengthen_skel_val_ty, strengthen_skel_comp_ty.


Theorem strengthen_is_dirt :
  forall Sig_s Sig_t Ctx_s2t Ctx_t D, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- is_dirt D} -> {Ctx_t |- is_dirt D}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply i2e/ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_in_dirt :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O D, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- in_dirt O D} -> {Ctx_t |- in_dirt O D}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply i2e/ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_is_op :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- is_op O} -> {Ctx_t |- is_op O}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply i2e/ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_of_coer :
  forall Sig_s Sig_t Ctx_s2t Ctx_t Y Pi, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- exp/of_coer Y Pi} -> {Ctx_t |- exp/of_coer Y Pi}.
induction on 2. intros. case H2.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. search.
  apply IH to _ H3. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply strengthen_is_dirt to H1 H3. search.
  search.
  apply IH to H1 H3. search.
  apply i2e/ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. search. case H3.

Theorem i2e/ctxs_sig :
  forall Sig_s Sig_t Ctx_s2t Ctx_t, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {i2e/sig Sig_s Sig_t}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.

Theorem strengthen_poly_var_i2e/ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 As At, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, i2e/poly_var X1 X2 X3 X4 |- i2e/val_ty As At} ->
    {Ctx_s2t |- i2e/val_ty As At}
  )
  /\
  (
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 Bs Bt, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, i2e/poly_var X1 X2 X3 X4 |- i2e/comp_ty Bs Bt} ->
    {Ctx_s2t |- i2e/comp_ty Bs Bt}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. search. case H3. case H3. case H3.
intros. case H2.
  apply IH to H1 H3. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.
Split strengthen_poly_var_i2e/ty as strengthen_poly_var_i2e/val_ty, strengthen_poly_var_i2e/comp_ty.

Theorem strengthen_i2e/var_i2e/ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 As At, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, i2e/var X1 X2 X3 X4 |- i2e/val_ty As At} ->
    {Ctx_s2t |- i2e/val_ty As At}
  )
  /\
  (
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 Bs Bt, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, i2e/var X1 X2 X3 X4 |- i2e/comp_ty Bs Bt} ->
    {Ctx_s2t |- i2e/comp_ty Bs Bt}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. search. case H3. case H3. case H3.
intros. case H2.
  apply IH to H1 H3. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.
Split strengthen_i2e/var_i2e/ty as strengthen_i2e/var_i2e/val_ty, strengthen_i2e/var_i2e/comp_ty.

Theorem strengthen_of_coer_i2e/ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 As At, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, exp/of_coer X1 X2 |- i2e/val_ty As At} ->
    {Ctx_s2t |- i2e/val_ty As At}
  )
  /\
  (
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 Bs Bt, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, exp/of_coer X1 X2 |- i2e/comp_ty Bs Bt} ->
    {Ctx_s2t |- i2e/comp_ty Bs Bt}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. search. case H3. case H3. case H3.
intros. case H2.
  apply IH to H1 H3. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.
Split strengthen_of_coer_i2e/ty as strengthen_of_coer_i2e/val_ty, strengthen_of_coer_i2e/comp_ty.

Theorem strengthen_i2e/cnstr :
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 Pi_s Pi_t, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, exp/of_coer X1 X2 |- i2e/cnstr Pi_s Pi_t} ->
  {Ctx_s2t |- i2e/cnstr Pi_s Pi_t}.
induction on 2. intros. case H2.
  apply strengthen_of_coer_i2e/val_ty to H1 H3. apply strengthen_of_coer_i2e/val_ty to H1 H4. search.
  search.
  apply strengthen_of_coer_i2e/comp_ty to H1 H3. apply strengthen_of_coer_i2e/comp_ty to H1 H4. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_i2e/qual_ty :
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 Q A, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, exp/of_coer X1 X2 |- i2e/qual_ty Q A} ->
  {Ctx_s2t |- i2e/qual_ty Q A}.
induction on 2. intros. case H2.
  apply strengthen_of_coer_i2e/val_ty to H1 H3. search.
  apply IH to H1 H4. apply strengthen_i2e/cnstr to H1 H3. search.
  case H4.
    case H3.
    apply i2e/ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_apart :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O1 O2, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- apart O1 O2} -> {apart O1 O2}.
induction on 2. intros. case H2.
  search.
  search.
  apply IH to H1 H3. search.
  apply i2e/ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_of_op :
  forall Sig_s Sig_t Ctx_s2t Ctx_t Sig O A1s A2s, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- imp/of_op Sig O A1s A2s} -> {imp/of_op Sig O A1s A2s}.
induction on 2. intros. case H2.
  search.
  apply strengthen_apart to H1 H4. apply IH to H1 H3. search.
  apply i2e/ctx_member to H1 H4.
  case H5.
    case H3. case H3. case H3. case H3. case H3. case H3.

Theorem i2e/sig_ctxs :
  forall Sig_s Sig_t Ctx_s2t Ctx_t, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {i2e/sig Sig_s Sig_t}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.

Theorem i2e/of_closed_op :
  forall Sig_s Sig_t O A1s A2s,
  {i2e/sig Sig_s Sig_t} -> {imp/of_op Sig_s O A1s A2s} ->
  exists A1t A2t, {exp/of_op Sig_t O A1t A2t} /\ {i2e/val_ty A1s A1t} /\ {i2e/val_ty A2s A2t}.
induction on 1. intros. case H1.
  case H2.
  case H2.
    search.
    apply IH to H5 H6.
    search.

Theorem i2e/of_op :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O A1s A2s, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- imp/of_op Sig_s O A1s A2s} ->
  exists A1t A2t, {exp/of_op Sig_t O A1t A2t} /\ {i2e/val_ty A1s A1t} /\ {i2e/val_ty A2s A2t}.
intros.
apply strengthen_of_op to H1 H2.
apply i2e/sig_ctxs to H1.
apply i2e/of_closed_op to H4 H3.
search.

Theorem i2e/good_coer_ty :
  forall Sig_s Sig_t Ctx_s2t Ctx_t Pi_t, i2e/ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- exp/good_coer_ty Pi_t} -> {Ctx_t |- exp/good_coer_ty Pi_t}.
intros. case H2.
  apply strengthen_skel_val_ty to H1 H3. apply strengthen_skel_val_ty to H1 H4. search.
  apply strengthen_skel_comp_ty to H1 H3. apply strengthen_skel_comp_ty to H1 H4. search.
  search.
  apply i2e/ctx_member to H1 H4. case H5.
    case H3.
    case H3.
    case H3.
    case H3.
    case H3.
    case H3.
