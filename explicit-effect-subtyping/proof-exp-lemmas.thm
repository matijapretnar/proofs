Specification "exp".
Import "common".
Close exp/val_ty, exp/comp_ty, exp/coer_ty.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem exp/of_op_unique : forall Sig O A A' B B',
  {exp/of_op Sig O A B} -> {exp/of_op Sig O A' B'} -> A = A' /\ B = B'.
induction on 1. intros. case H1.
  case H2. search. apply apart_not_reflexive to H4.
  case H2.
    apply apart_not_reflexive to H4.
    apply IH to H3 H5. search.

Theorem exp/less_ty_transitive :
  (forall A B C, {exp/less_val_ty A B} -> {exp/less_val_ty B C} -> {exp/less_val_ty A C}) /\
  (forall A B C, {exp/less_val_ty B C} -> {exp/less_val_ty A B} -> {exp/less_val_ty A C}) /\
  (forall A B C, {exp/less_comp_ty A B} -> {exp/less_comp_ty B C} -> {exp/less_comp_ty A C}) /\
  (forall A B C, {exp/less_comp_ty B C} -> {exp/less_comp_ty A B} -> {exp/less_comp_ty A C}).
induction on 1 1 1 1. split.

intros. case H1.
search.
case H2. apply IH1 to H3 H5. apply IH2 to H4 H6. search.
case H2. apply IH3 to H3 H5. apply IH2 to H4 H6. search.
case H2. apply IH to H3 H4. search.
case H2. apply IH to H3 H4. search.
case H2. apply IH to H3 H4. search.
case H2. apply IH to H3 H4. search.

intros. case H1.
search.
case H2. apply IH to H3 H5. apply IH3 to H4 H6. search.
case H2. apply IH2 to H3 H5. apply IH3 to H4 H6. search.
case H2. apply IH1 to H3 H4. search.
case H2. apply IH1 to H3 H4. search.
case H2. apply IH1 to H3 H4. search.
case H2. apply IH1 to H3 H4. search.

intros. case H1.
case H2. apply IH to H3 H5. apply less_dirt_transitive to H4 H6. search.

intros. case H1.
case H2. apply IH1 to H3 H5. apply less_dirt_transitive to H6 H4. search.

Split exp/less_ty_transitive as exp/less_val_ty_transitive, forget, exp/less_comp_ty_transitive, forget.

Theorem exp/coer_less_ty :
  (forall Y A B, {exp/of_coer Y (exp/val_ty_coer_ty A B)} -> {exp/less_val_ty A B}) /\
  (forall Y A B, {exp/of_coer Y (exp/comp_ty_coer_ty A B)} -> {exp/less_comp_ty A B}) /\
  (forall Y A B, {exp/of_coer Y (exp/dirt_coer_ty A B)} -> {less_dirt A B}).
induction on 1 1 1. split.

intros. case H1.
apply IH to H2. apply IH to H3. apply exp/less_val_ty_transitive to H4 H5. search.
apply IH to H2. apply IH1 to H3. search.
apply IH1 to H2. apply IH1 to H3. search.
apply IH to H2. case H3. search.
apply IH to H2. case H3. inst H4 with n1 = S. search.
apply IH to H2. case H4. inst H5 with n1 = A3. search.
apply IH to H2. case H3. inst H4 with n1 = D. search.
apply IH to H2. case H4. search.
apply IH1 to H2. case H3. search.

intros. case H1.
apply IH1 to H2. apply IH1 to H3. case H4. case H5. apply exp/less_val_ty_transitive to H6 H8. apply less_dirt_transitive to H7 H9. search.
apply IH to H2. case H3. search.
apply IH to H2. case H3. search.
apply IH to H2. case H3. search.
apply IH to H2. apply IH2 to H3. search.

intros. case H1.
apply IH2 to H2. apply IH2 to H3. apply less_dirt_transitive to H4 H5. search.
apply IH1 to H2. case H3. search.
apply less_dirt_reflexive to H2. search.
search.
apply IH2 to H2. apply less_dirt_cons to H3 with O = O. search.
Split exp/coer_less_ty as exp/coer_less_val_ty, exp/coer_less_comp_ty.
