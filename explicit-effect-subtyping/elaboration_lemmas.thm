Specification "elaboration".
Import "common".
Close t/val_ty, t/comp_ty, t/coer_ty.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Contexts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define elb_ctxs : s/sig -> t/sig -> olist -> olist -> prop by
  elb_ctxs Sig_s Sig_t nil nil := {elb_sig Sig_s Sig_t};
  nabla x x', elb_ctxs Sig_s Sig_t
    (elb_poly_var Sig_s x Ps x' :: Ctx_s2t)
    (t/of_val Sig_t x' At :: Ctx_t)
    := elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t /\ {Ctx_s2t |- elb_poly_ty Ps At};
  nabla x x', elb_ctxs Sig_s Sig_t
    (elb_var Sig_s x As x' :: Ctx_s2t)
    (t/of_val Sig_t x' At :: Ctx_t)
    := elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t /\ {Ctx_s2t |- elb_val_ty As At};
  nabla t t', elb_ctxs Sig_s Sig_t
    (elb_val_ty t t' :: Ctx_s2t)
    Ctx_t
    := elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t;
  nabla s, elb_ctxs Sig_s Sig_t
    (ground_skel s :: Ctx_s2t)
    Ctx_t
    := elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t;
  nabla w, elb_ctxs Sig_s Sig_t
    (t/of_coer w Pi :: Ctx_s2t)
    (t/of_coer w Pi :: Ctx_t)
    := elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t;
  nabla t, elb_ctxs Sig_s Sig_t
    (t/skel_val_ty t S :: Ctx_s2t)
    (t/skel_val_ty t S :: Ctx_t)
    := elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t.

Theorem elb_ctx_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  member F Ctx_s2t -> (
    exists X Ps X' At,
    fresh X /\ fresh X' /\
    (F = elb_poly_var Sig_s X Ps X') /\ {Ctx_s2t |- elb_poly_ty Ps At} /\
    member (t/of_val Sig_t X' At) Ctx_t
  ) \/ (
    exists X As X' At,
    fresh X /\ fresh X' /\
    (F = elb_var Sig_s X As X') /\ {Ctx_s2t |- elb_val_ty As At} /\
    member (t/of_val Sig_t X' At) Ctx_t
  ) \/ (
    exists X X', fresh X /\ fresh X' /\ F = elb_val_ty X X'
  ) \/ (
    exists X, fresh X /\ F = ground_skel X
  ) \/ (
    exists X Pi, fresh X /\ F = t/of_coer X Pi /\ member (t/of_coer X Pi) Ctx_t
  ) \/ (
    exists X S, fresh X /\ F = t/skel_val_ty X S /\ member (t/skel_val_ty X S) Ctx_t
  ).
induction on 1. intros Hctx Hmem. Hctx: case Hctx.
% empty context
case Hmem.
% poly_var
Hmem: case Hmem.
  % here
  search.
  % there
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% elb_var
Hmem: case Hmem.
  % here
  search.
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% elb_val_ty
Hmem: case Hmem.
  % here
  search.
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% ground_skel
Hmem: case Hmem.
  % here
  search.
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% of_coer
Hmem: case Hmem.
  % here
  search.
  % there
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.
% skel_val_ty
Hmem: case Hmem.
  % here
  search.
  % there
  Hthere: apply IH to Hctx Hmem. case Hthere. search. search. search. search. search. search.

Theorem elb_comp_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_comp X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_skel_val_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- t/skel_val_ty X1 X2} -> member F Ctx_s2t ->
  F = t/skel_val_ty X1 X2 /\ fresh X1 /\ {Ctx_t |- t/skel_val_ty X1 X2}.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H. search.

Theorem elb_skel_comp_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- t/skel_comp_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_comp_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_comp_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_hand_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4 X5 X6, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_hand X1 X2 X3 X4 X5 X6} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_poly_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_poly_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_poly_val_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F Vs Ps Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_poly_val Sig_s Vs Ps Vt} -> member F Ctx_s2t ->
  exists At, {Ctx_s2t |- elb_poly_ty Ps At} /\ {Ctx_t |- t/of_val Sig_t Vt At}.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_poly_var_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F Vs Ps Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_poly_var Sig_s Vs Ps Vt} -> member F Ctx_s2t ->
  exists At, {Ctx_s2t |- elb_poly_ty Ps At} /\ {Ctx_t |- t/of_val Sig_t Vt At}.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. search. case H. case H. case H. case H. case H.

Theorem elb_qual_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_qual_ty X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_qual_val_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_qual_val X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_qual_var_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_qual_var X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_val_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2 X3 X4, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_val X1 X2 X3 X4} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

Theorem elb_val_ty_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_val_ty X1 X2} -> member F Ctx_s2t ->
  F = elb_val_ty X1 X2 /\ fresh X1.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. search. case H. case H. case H.

Theorem elb_var_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F Vs As Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_var Sig_s Vs As Vt} -> member F Ctx_s2t ->
  exists At, {Ctx_s2t |- elb_val_ty As At} /\ {Ctx_t |- t/of_val Sig_t Vt At}.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. search. case H. case H. case H. case H.

Theorem elb_cnstr_member :
  forall Sig_s Sig_t Ctx_s2t Ctx_t F X1 X2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, [F] |- elb_cnstr X1 X2} -> member F Ctx_s2t ->
  false.
intros Hctx H Hmem. Hform : apply elb_ctx_member to *Hctx *Hmem.
  case Hform. case H. case H. case H. case H. case H. case H.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Uniqueness
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem member_nominal_absurd : forall L T, nabla x,
  member (elb_val_ty x T) L -> false.
induction on 1. intros. case H1. apply IH to H2.

Theorem unique_ctx_elb_ty :
  forall Sig_s Sig_t Ctx_s2t Ctx_t As At1 At2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  member (elb_val_ty As At1) Ctx_s2t -> member (elb_val_ty As At2) Ctx_s2t -> At1 = At2.
induction on 2. intros. case H2.
  case H3.
    search.
    case H1. apply member_nominal_absurd to H4.
  case H3.
    case H1. apply member_nominal_absurd to H4.
    case H1.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.
      apply IH to H6 H4 H5. search.

Theorem unique_elb_ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t As At1 At2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_val_ty As At1} -> {Ctx_s2t |- elb_val_ty As At2} -> At1 = At2
  )
  /\
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t As At1 At2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_comp_ty As At1} -> {Ctx_s2t |- elb_comp_ty As At2} -> At1 = At2
  ).
induction on 2 2. split.

intros. case H2.
  % unit_ty
  case H3. search.
  Hfresh : apply elb_val_ty_member to H1 H4 H5. case Hfresh.
  % fun_ty
  case H3. apply IH to H1 H4 H6. apply IH1 to H1 H5 H7. search.
  Hfresh : apply elb_val_ty_member to H1 H6 H7. case Hfresh.
  % hand_ty
  case H3. apply IH1 to H1 H4 H6. apply IH1 to H1 H5 H7. search.
  Hfresh : apply elb_val_ty_member to H1 H6 H7. case Hfresh.
  % in context
  Hfresh : apply elb_val_ty_member to H1 H4 H5.
  case Hfresh. case H4. case H3.
  Hfresh : apply elb_val_ty_member to H1 H6 H7.
  apply unique_ctx_elb_ty to H1 H5 H7. search.

intros. case H2.
  % bang
  case H3. apply IH to H1 H4 H5. search.
  Hfresh : apply elb_comp_ty_member to H1 H5 H6.
  % in context
  Hfresh : apply elb_comp_ty_member to H1 H4 H5.

Split unique_elb_ty as unique_elb_val_ty, unique_elb_comp_ty.

Theorem unique_elb_cnstr :
  forall Sig_s Sig_t Ctx_s2t Ctx_t Pi Pi1 Pi2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- elb_cnstr Pi Pi1} -> {Ctx_s2t |- elb_cnstr Pi Pi2} -> Pi1 = Pi2.
intros. case H2.
  % val_ty_coer_ty
  case H3. apply unique_elb_val_ty to H1 H4 H6. apply unique_elb_val_ty to H1 H5 H7. search.
  apply elb_cnstr_member to H1 H6 H7.
  % dirt_coer_ty
  case H3. search.
  apply elb_cnstr_member to H1 H4 H5.
  % comp_ty_coer_ty
  case H3. apply unique_elb_comp_ty to H1 H4 H6. apply unique_elb_comp_ty to H1 H5 H7. search.
  apply elb_cnstr_member to H1 H6 H7.
  % in context
  apply elb_cnstr_member to H1 H4 H5.

Theorem strengthen_skel_ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t A S, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- t/skel_val_ty A S} -> {Ctx_t |- t/skel_val_ty A S}
  )
  /\
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t B S, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- t/skel_comp_ty B S} -> {Ctx_t |- t/skel_comp_ty B S}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  apply IH to H1 H3. search.
  apply IH to _ H3 with Ctx_t = t/skel_val_ty n1 S1 :: Ctx_t. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply elb_skel_val_ty_member to H1 H3 H4. case H3. search.
intros. case H2.
  apply IH to H1 H3. search.
  apply elb_skel_comp_ty_member to H1 H3 H4.
Split strengthen_skel_ty as strengthen_skel_val_ty, strengthen_skel_comp_ty.


Theorem strengthen_is_dirt :
  forall Sig_s Sig_t Ctx_s2t Ctx_t D, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- is_dirt D} -> {Ctx_t |- is_dirt D}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply elb_ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_in_dirt :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O D, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- in_dirt O D} -> {Ctx_t |- in_dirt O D}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply elb_ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_is_op :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- is_op O} -> {Ctx_t |- is_op O}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply elb_ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_of_coer :
  forall Sig_s Sig_t Ctx_s2t Ctx_t Y Pi, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- t/of_coer Y Pi} -> {Ctx_t |- t/of_coer Y Pi}.
induction on 2. intros. case H2.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. apply strengthen_skel_val_ty to H1 H4. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. apply IH to H1 H4. search.
  apply IH to H1 H3. search.
  apply IH to H1 H3. search.
  apply strengthen_is_dirt to H1 H3. search.
  search.
  apply IH to H1 H3. search.
  apply elb_ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. search. case H3.

Theorem elb_ctxs_sig :
  forall Sig_s Sig_t Ctx_s2t Ctx_t, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {elb_sig Sig_s Sig_t}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.
  apply IH to H2. search.

Theorem strengthen_poly_var_elb_ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 As At, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, elb_poly_var X1 X2 X3 X4 |- elb_val_ty As At} ->
    {Ctx_s2t |- elb_val_ty As At}
  )
  /\
  (
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 Bs Bt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, elb_poly_var X1 X2 X3 X4 |- elb_comp_ty Bs Bt} ->
    {Ctx_s2t |- elb_comp_ty Bs Bt}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. search. case H3. case H3. case H3.
intros. case H2.
  apply IH to H1 H3. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.
Split strengthen_poly_var_elb_ty as strengthen_poly_var_elb_val_ty, strengthen_poly_var_elb_comp_ty.

Theorem strengthen_elb_var_elb_ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 As At, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, elb_var X1 X2 X3 X4 |- elb_val_ty As At} ->
    {Ctx_s2t |- elb_val_ty As At}
  )
  /\
  (
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 X3 X4 Bs Bt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, elb_var X1 X2 X3 X4 |- elb_comp_ty Bs Bt} ->
    {Ctx_s2t |- elb_comp_ty Bs Bt}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. search. case H3. case H3. case H3.
intros. case H2.
  apply IH to H1 H3. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.
Split strengthen_elb_var_elb_ty as strengthen_elb_var_elb_val_ty, strengthen_elb_var_elb_comp_ty.

Theorem strengthen_of_coer_elb_ty :
  (
    forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 As At, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, t/of_coer X1 X2 |- elb_val_ty As At} ->
    {Ctx_s2t |- elb_val_ty As At}
  )
  /\
  (
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 Bs Bt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t, t/of_coer X1 X2 |- elb_comp_ty Bs Bt} ->
    {Ctx_s2t |- elb_comp_ty Bs Bt}
  ).
induction on 2 2. split.
intros. case H2.
  search.
  apply IH to H1 H3. apply IH1 to H1 H4. search.
  apply IH1 to H1 H3. apply IH1 to H1 H4. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. search. case H3. case H3. case H3.
intros. case H2.
  apply IH to H1 H3. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.
Split strengthen_of_coer_elb_ty as strengthen_of_coer_elb_val_ty, strengthen_of_coer_elb_comp_ty.

Theorem strengthen_elb_cnstr :
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 Pi_s Pi_t, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, t/of_coer X1 X2 |- elb_cnstr Pi_s Pi_t} ->
  {Ctx_s2t |- elb_cnstr Pi_s Pi_t}.
induction on 2. intros. case H2.
  apply strengthen_of_coer_elb_val_ty to H1 H3. apply strengthen_of_coer_elb_val_ty to H1 H4. search.
  search.
  apply strengthen_of_coer_elb_comp_ty to H1 H3. apply strengthen_of_coer_elb_comp_ty to H1 H4. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_elb_qual_ty :
  forall Sig_s Sig_t Ctx_s2t Ctx_t X1 X2 Q A, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t, t/of_coer X1 X2 |- elb_qual_ty Q A} ->
  {Ctx_s2t |- elb_qual_ty Q A}.
induction on 2. intros. case H2.
  apply strengthen_of_coer_elb_val_ty to H1 H3. search.
  apply IH to H1 H4. apply strengthen_elb_cnstr to H1 H3. search.
  case H4.
    case H3.
    apply elb_ctx_member to H1 H5. case H6. case H3. case H3. case H3. case H3. case H3. case H3.

Theorem strengthen_apart :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O1 O2, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- apart O1 O2} -> {apart O1 O2}.
induction on 2. intros. case H2.
  search.
  search.
  apply IH to H1 H3. search.
  apply elb_ctx_member to H1 H4. case H5. case H3. case H3. case H3. case H3. case H3. case H3.
