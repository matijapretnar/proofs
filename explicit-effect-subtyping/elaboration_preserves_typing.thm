Specification "elaboration".
Import "common".
Import "elaboration_lemmas".
Set subgoals off.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Source-to-target elaboration produces typeable terms.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem elb_of_op :
  forall Sig_s Sig_t Ctx_s2t Ctx_t O A1s A2s, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
  {Ctx_s2t |- s/of_op Sig_s O A1s A2s} ->
  exists A1t A2t, {t/of_op Sig_t O A1t A2t} /\ {elb_val_ty A1s A1t} /\ {elb_val_ty A2s A2t}.


Theorem elb_of_var :
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Vs As Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_var Sig_s Vs As Vt} -> exists At, {Ctx_s2t |- elb_val_ty As At} /\ {Ctx_t |- t/of_val Sig_t Vt At}
  )
  /\
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Vs Qs Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_qual_var Sig_s Vs Qs Vt} -> exists At, {Ctx_s2t |- elb_qual_ty Qs At} /\ {Ctx_t |- t/of_val Sig_t Vt At}
  )
  /\
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Vs Ps Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_poly_var Sig_s Vs Ps Vt} -> exists At, {Ctx_s2t |- elb_poly_ty Ps At} /\ {Ctx_t |- t/of_val Sig_t Vt At}
  ).
induction on 2 2 2. split.

% VAR
intros Hctx Hof. Hof : case Hof.
  % from qualified type
  Hof_sub : apply IH1 to Hctx *Hof. Hof_sub : case Hof_sub.
    search.
    apply elb_qual_ty_member to Hctx Hof_sub Hof_sub2.
  % in context
  apply elb_var_member to Hctx Hof Hof1. search.

% QUAL VAR
intros Hctx Hof. Hof : case Hof.
  % as a coercion
  Hof_sub : apply IH1 to Hctx *Hof. Hof_sub : case Hof_sub.
    % main case
    apply unique_elb_cnstr to Hctx Hof1 Hof_sub.
    apply strengthen_of_coer to Hctx Hof2.
    search.
    % backchain
    apply elb_qual_ty_member to Hctx Hof_sub Hof_sub2.
  % from a poly type
  Hof_sub : apply IH2 to Hctx *Hof. Hof_sub : case Hof_sub.
    % main case
    search.
    % backchain
    apply elb_poly_ty_member to Hctx Hof_sub Hof_sub2.
  % in context
  apply elb_qual_var_member to Hctx Hof Hof1.

% POLY VAR
intros Hctx Hof. Hof : case Hof.
  % poly skeleton
  Hof_sub : apply IH2 to Hctx *Hof. Hof_sub : case Hof_sub.
    % main case
    inst Hof_sub with n1 = S. cut H1. search.
    % backchain
    apply elb_poly_ty_member to Hctx Hof_sub Hof_sub2.
  % poly ty
  Hof_sub : apply IH2 to Hctx *Hof3. Hof_sub : case Hof_sub.
    % main case
    inst Hof_sub2 with n1 = As, n2 = At. cut H1.
    apply strengthen_skel_val_ty to Hctx Hof2.
    search.
    % backchain
    apply elb_poly_ty_member to Hctx Hof_sub Hof_sub2.
  % poly dirt
  Hof_sub : apply IH2 to Hctx *Hof. Hof_sub : case Hof_sub.
    % main case
    inst Hof_sub with n1 = D. search.
    % backchain
    apply elb_poly_ty_member to Hctx Hof_sub Hof_sub2.
  % in context
  apply elb_poly_var_member to Hctx Hof Hof1. search.

Split elb_of_var as elb_of_var, stupid1, stupid2.

Theorem elb_of :
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Vs As Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_val Sig_s Vs As Vt} -> exists At, {Ctx_s2t |- elb_val_ty As At} /\ {Ctx_t |- t/of_val Sig_t Vt At})
  /\
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Hs As D Bs Ht, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_hand Sig_s Hs As D Bs Ht} -> exists At Bt, {Ctx_s2t |- elb_val_ty As At} /\ {Ctx_s2t |- elb_comp_ty Bs Bt} /\ {Ctx_t |- t/of_hand Sig_t Ht At D Bt})
  /\
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Cs Bs Ct, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_comp Sig_s Cs Bs Ct} -> exists Bt, {Ctx_s2t |- elb_comp_ty Bs Bt} /\ {Ctx_t |- t/of_comp Sig_t Ct Bt})
  /\
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Vs Qs Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_qual_val Sig_s Vs Qs Vt} -> exists At, {Ctx_s2t |- elb_qual_ty Qs At} /\ {Ctx_t |- t/of_val Sig_t Vt At})
  /\
  (forall Sig_s Sig_t Ctx_s2t Ctx_t Vs Ps Vt, elb_ctxs Sig_s Sig_t Ctx_s2t Ctx_t ->
    {Ctx_s2t |- elb_poly_val Sig_s Vs Ps Vt} -> exists At, {Ctx_s2t |- elb_poly_ty Ps At} /\ {Ctx_t |- t/of_val Sig_t Vt At}).
induction on 2 2 2 2 2. split.
% VALUES
intros Hctx Hof. Hof : case Hof.
% VAR
apply elb_of_var to Hctx Hof. search.
% UNIT
search.
% FUN
apply IH2 to _ Hof.
apply strengthen_elb_var_elb_comp_ty to Hctx H1.
search.
% HANDLER
apply IH1 to _ Hof. search.
% VALUE COERCION
apply IH to Hctx Hof.
apply unique_elb_val_ty to Hctx Hof1 H1.
apply strengthen_of_coer to Hctx Hof3.
search.
% BACKCHAIN
apply elb_val_member to Hctx Hof Hof1.

% HANDLERS
intros Hctx Hof. Hof : case Hof.
% RETURN CASE
apply IH2 to _ Hof.
apply strengthen_elb_var_elb_comp_ty to Hctx H1.
case H3.
  % main case
  search.
  % in context
  apply elb_comp_ty_member to Hctx H4 H5.

% OP CASE
apply IH1 to _ Hof.
apply elb_of_op to Hctx Hof1.
apply IH2 to _ Hof2 with Ctx_t = (
  t/of_val Sig_t n4 (t/fun_ty A2t Bt) :: t/of_val Sig_t n2 A1t :: Ctx_t
).
apply strengthen_elb_var_elb_comp_ty to _ H7.
apply strengthen_elb_var_elb_comp_ty to _ H9.
apply unique_elb_comp_ty to Hctx H2 H10.
apply strengthen_is_op to Hctx Hof3.
search.
% BACKCHAIN
apply elb_hand_member to Hctx Hof Hof1.

% COMPUTATIONS
intros Hctx Hof. Hof : case Hof.
% APP
apply IH to Hctx Hof.
apply IH to Hctx Hof1.
case H1.
  apply unique_elb_val_ty to Hctx H3 H5. search.
  apply elb_val_ty_member to Hctx H5 H6. case H7.
% LET
apply IH4 to _ Hof.
apply IH2 to _ Hof1.
apply strengthen_poly_var_elb_comp_ty to Hctx H3.
search.
% RETURN
apply IH to Hctx Hof. search.
% OP
apply elb_of_op to Hctx Hof.
apply IH to Hctx Hof1.
apply IH2 to _ Hof3.
apply unique_elb_val_ty to Hctx H2 H4.
apply unique_elb_val_ty to Hctx Hof2 H3.
apply strengthen_elb_var_elb_comp_ty to Hctx H6.
case H8.
  % main case.
  apply strengthen_in_dirt to Hctx Hof4.
  apply strengthen_is_op to Hctx Hof5.
  search.
  % backchain
  apply elb_comp_ty_member to Hctx H9 H10.
% DO
apply IH2 to Hctx Hof.
case H1.
  % main case
  apply IH2 to _ Hof1 with Ctx_t = (t/of_val Sig_t n2 At :: Ctx_t).
  apply strengthen_elb_var_elb_comp_ty to Hctx H4.
  case H6.
    search.
    % backchain 2
    apply elb_comp_ty_member to Hctx H7 H8.
  % backchain
  apply elb_comp_ty_member to Hctx H3 H4.
% HANDLE
apply IH2 to _ Hof.
apply IH to _ Hof1.
case H3.
  apply unique_elb_comp_ty to Hctx H1 H5. search.
  apply elb_val_ty_member to Hctx H5 H6. case H7.
% COMPUTATION COERCION
apply IH2 to Hctx Hof.
apply unique_elb_comp_ty to Hctx Hof1 H1.
apply strengthen_of_coer to Hctx Hof3.
search.
% BACKCHAIN
apply elb_comp_member to Hctx Hof Hof1.

% QUALIFIED TYPES
intros Hctx Hof. Hof : case Hof.
% PLAIN VALUE TYPE
apply IH to Hctx Hof. search.
% CONSTRAINED VALUE TYPE
apply IH3 to _ Hof1.
apply strengthen_elb_qual_ty to Hctx H1.
search.
% BACKCHAIN
apply elb_qual_val_member to Hctx Hof Hof1.

% POLYTYPES
intros Hctx Hof. Hof : case Hof.
% PLAIN QUALIFIED TYPE
apply IH3 to Hctx Hof. search.
% FORALL SKELETON
apply IH4 to _ Hof. search.
% FORALL VALUE TYPE
apply IH4 to _ Hof. search.
% FORALL SKELETON
apply IH4 to _ Hof. search.
% BACKCHAIN
apply elb_poly_val_member to Hctx Hof Hof1. search.
