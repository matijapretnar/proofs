Specification "erasure".
Import "common".
Import "erasure_lemmas".
Set subgoals off.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem step_normal : forall V V' A,
  {e/step_val V V'} -> {e/normal V' A} -> {e/normal V A}.
induction on 2. intros. case H2.
  search.
  search.
  search.
  assert {e/converges V}.
  assert {e/step_val (e/app_ty V n1) (e/app_ty V' n1)}.
  apply IH to H6 H4. search.

Theorem val_normal : forall Sig V A,
    {e/of_val Sig V A} -> {e/normal V A}.
induction on 1. intros. case H1.
  search.
  search.
  search.
  apply IH to H2.
  assert {pi t\ e/normal (e/app_ty (e/lam_ty V1) t) (T t)}.
    assert {e/step_val (e/app_ty (e/lam_ty V1) n1) (V1 n1)}.
    apply step_normal to H4 H3. search.
  search.
  apply IH to H2.
    case H3. inst H5 with n1 = T2. search.

Theorem normal_converges : forall V A,
  {e/normal V A} -> {e/converges V}.
intros. case H1.
  search.
  search.
  search.
  search.

Define e/cong_val : e/val -> e/val -> prop, e/cong_comp : e/comp -> e/comp -> prop by
    % 1
    e/cong_val V1 V2 := {e/step_val V1 V2};
    % 2
    e/cong_val V V;
    % 3
    e/cong_val V1 V2 := e/cong_val V2 V1;
    % 4
    e/cong_val V1 V3 := exists V2, e/cong_val V1 V2 /\ e/cong_val V2 V3;
    % 5
    e/cong_val V1 V2 := exists V V1' V2', V1 = V V1' /\ V2 = V V2' /\ e/cong_val V1' V2';
    % 6
    e/cong_val V1 V2 := exists V C1' C2', V1 = V C1' /\ V2 = V C2' /\ e/cong_comp C1' C2';
    % 7
    e/cong_comp C1 C2 := {e/step_comp C1 C2};
    % 8
    e/cong_comp C C;
    % 9
    e/cong_comp C1 C2 := e/cong_comp C2 C1;
    % 10
    e/cong_comp C1 C3 := exists C2, e/cong_comp C1 C2 /\ e/cong_comp C2 C3;
    % 11
    e/cong_comp C1 C2 := exists C V1' V2', C1 = C V1' /\ C2 = C V2' /\ e/cong_val V1' V2';
    % 12
    e/cong_comp C1 C2 := exists C C1' C2', C1 = C C1' /\ C2 = C C2' /\ e/cong_comp C1' C2'.

Theorem converges_cong_result :
  forall V, {e/converges V} -> exists V', {e/result_val V'} /\ e/cong_val V V'.
induction on 1. intros. case H1.
  search.
  apply IH to H3. search.  

Theorem val_cong_result :
  forall Sig V S,
    {e/of_val Sig V S} -> exists V', {e/result_val V'} /\ e/cong_val V V'.
intros.
  apply val_normal to H1.
  apply normal_converges to H2.
  apply converges_cong_result to H3.
  search.

Theorem ers_get_ret_case :
  forall Ht Ct Vt He Ce Ve,
    {t/get_ret_case Ht Ct} -> {ers_hand Ht He} -> {ers_comp (Ct Vt) Ce} -> {ers_val Vt Ve} ->
    exists Ce', {e/get_ret_case He Ce'} /\ Ce = Ce' Ve.
induction on 1. intros. case H1.
  case H2.
    exists Ce1. inst H5 with n1 = Vt, n2 = Ve. cut H7 with H4.
    apply unique_ers_comp to _ H3 H8. search.
  case H2.
    apply IH to H5 H6 H3 H4.
    search.

Theorem ers_get_op_case :
  forall Ht O At Ct Vt Kt He Ae Ce Ve Ke,
    {t/get_op_case Ht O At Ct} -> {ers_hand Ht He} -> {ers_comp (Ct Vt Kt) Ce} -> {ers_val Vt Ve} ->
    {t/skel_val_ty At Ae} -> {ers_val Kt Ke} ->
    exists Ce', {e/get_op_case He O Ae Ce'} /\ Ce = Ce' Ve Ke.
induction on 1. intros. case H1.
  case H2.
    case H3.
    exists (x\ k\ e/op O x Ae (y\ e/app k y)).
    apply unique_ers_val to _ H4 H9.
    apply unique_skel_val_ty to _ H5 H10.
    case H11.
    monotone H6 with ers_val n1 n2 :: nil.
    apply unique_ers_val to _ H12 H14.
    assert {ers_val n1 n2 |- ers_val n1 n2}.
    apply unique_ers_val to _ H13 H15. search.
    case H13. case H12. case H14.
  case H2.
    inst H9 with n1 = Vt, n2 = Ve, n3 = Kt, n4 = Ke.
    cut H10 with H4. cut H11 with H6.
    apply unique_ers_comp to _ H3 H12. search.
  case H2.
    apply IH to H8 H9 H3 H4 H5 H6. search.

Theorem val_preservation :
  forall Vt1 Vt2 Ve1 Ve2,
    {t/step_val Vt1 Vt2} -> {ers_val Vt1 Ve1} -> {ers_val Vt2 Ve2} ->
    e/cong_val Ve1 Ve2.
induction on 1. intros. case H1.
% COERCE
case H2. case H3. apply IH to H4 H5 H6. search.
% COMPOSE
case H2. case H3. case H5. apply unique_ers_val to _ H6 H7. search.
% APP_SKEL
case H2. case H3. apply IH to H4 H5 H6. unfold 5. exists (v\ e/app_ty v A). search.
% APP_TY
case H2. case H3. apply IH to H4 H5 H6. search.
% APP_DIRT
case H2. case H3. apply IH to H4 H5 H6. search.
% APP_COER
case H2. case H3. apply IH to H4 H5 H6. search.
% coerced APP_SKEL
case H2. case H3. case H5. case H6. apply unique_ers_val to _ H7 H8. search.
% coerced APP_TY
case H2. case H3. case H5. case H6. apply unique_ers_val to _ H7 H8. search.
% coerced APP_DIRT
case H2. case H3. case H5. case H6. apply unique_ers_val to _ H7 H8. search.
% coerced APP_COER
case H2. case H3. case H5. case H6. apply unique_ers_val to _ H7 H8. search.
% APP_SKEL reduce
case H2. case H4. inst H5 with n1 = S. apply unique_ers_val to _ H3 H6. search.
% APP_TY reduce
case H2. case H5.
inst H6 with n1 = A. cut H7 with H4.
apply unique_ers_val to _ H3 H8. search.
% APP_DIRT reduce
case H2. case H4. inst H5 with n1 = A.
apply unique_ers_val to _ H3 H6. search.
% APP_COER reduce
case H2. case H4. inst H5 with n1 = A.
apply unique_ers_val to _ H3 H6. search.


Theorem comp_preservation :
  forall Ct1 Ct2 Ce1 Ce2 Sig A,
    {e/of_comp Sig Ce1 A} ->
    {t/step_comp Ct1 Ct2} -> {ers_comp Ct1 Ce1} -> {ers_comp Ct2 Ce2} ->
    e/cong_comp Ce1 Ce2.
induction on 2. intros Hof. intros. case H1.
% COERCE
case H2. case H3. apply IH to _ H4 H5 H6. search.
% COMPOSE
case H2. case H5. case H3. apply unique_ers_comp to _ H6 H7. search.
% APP V1-step
case H2. case H3.
apply val_preservation to H4 H5 H7.
apply unique_ers_val to _ H6 H8.
unfold 11. exists (v\ e/app v V2e1). search.
% APP V1-t/coer
case H2. case H3. case H5. case H7. case H10.
apply unique_ers_val to _ H6 H11. apply unique_ers_val to _ H8 H9.
search.
% APP V2-step
case H2. case H3.
apply val_preservation to H5 H7 H9.
apply unique_ers_val to _ H6 H8.
Hof: case Hof.
apply val_cong_result to Hof1.
unfold 11. exists (v\ e/app V1e1 v). search.
% APP beta
case H2. case H5.
inst H7 with n1 = V, n2 = V2e. cut H9 with H6.
apply unique_ers_comp to _ H3 H10.
Hof: case Hof.
apply val_cong_result to Hof1.
unfold 10. exists (e/app (e/fun T Ce) V'). split.
unfold 11. exists (v\ e/app (e/fun T Ce) v). search.
unfold 10. exists (Ce V'). split.
unfold 7. search.
unfold 11. exists Ce. search.
% LET V-step
case H2. case H3.
apply val_preservation to H4 H5 H7.
apply unique_ers_comp to _ H6 H8.
unfold 11. exists (v\ e/let v Ce3). search.
% LET beta
case H2.
Hof: case Hof.
apply val_cong_result to Hof.
inst H6 with n1 = V, n2 = Ve. cut H9 with H5.
apply unique_ers_comp to _ H3 H10.
unfold 10. exists (e/let V' Ce). split.
unfold 11. exists (v\ e/let v Ce). search.
unfold 10. exists (Ce V'). split.
unfold 7. search.
unfold 11. exists Ce. search.
% RETURN V-step
case H2. case H3. apply val_preservation to H4 H5 H6.
unfold 11. exists (v\ e/ret v). search.
% RETURN coerce
case H2. case H4. case H3. case H6. apply unique_ers_val to _ H5 H7. search.
% OP V-step
case H2. case H3.
apply val_preservation to H4 H5 H8.
apply unique_ers_comp to _ H7 H10.
apply unique_skel_val_ty to _ H6 H9.
unfold 11. exists (v\ e/op O v Ae1 Ce3). search.
% OP-coerce
case H2. case H3. case H5.
apply unique_ers_val to _ H6 H9.
apply unique_skel_val_ty to _ H7 H10.
case H8. apply unique_ers_comp to _ H11 H12. search.
case H13. case H12. case H14.
% DO C1-step
case H2. case H3.
Hof : case Hof.
apply IH to _ H4 H5 H7.
apply unique_ers_comp to _ H6 H8.
unfold 12. exists (c\ e/do c Ce5). search.
% DO cast_ret
case H2. case H5. case H7.
Hof: case Hof.
Hof: case Hof.
apply val_cong_result to Hof.
inst H6 with n1 = (t/val_cast V (t/pure_coer Y)), n2 = Ve.
cut H11.
apply unique_ers_comp to _ H3 H12.
unfold 10. exists (e/do (e/ret V') Ce3). split.
unfold 11. exists (v\ e/do (e/ret v) Ce3). search.
unfold 10. exists (Ce3 V'). split.
unfold 7. search.
unfold 11. exists Ce3. search.
% DO t/ret
case H2. case H5.
Hof: case Hof.
Hof: case Hof.
apply val_cong_result to Hof.
inst H6 with n1 = V, n2 = Ve.
cut H10 with H7.
apply unique_ers_comp to _ H3 H11.
unfold 10. exists (e/do (e/ret V') Ce3). split.
unfold 11. exists (v\ e/do (e/ret v) Ce3). search.
unfold 10. exists (Ce3 V'). split.
unfold 7. search.
unfold 11. exists Ce3. search.
% DO op
case H2. case H3. case H5. case H9.
Hof: case Hof.
Hof: case Hof.
apply val_cong_result to Hof2.
apply unique_ers_val to _ H7 *H10.
apply unique_skel_val_ty to _ *H8 *H11.
apply unique_ers_comp to _ *H12 *H13.
inst *H6 with n1 = n3, n2 = n4.
monotone *H17 with (ers_val n3 n4 :: ers_val n1 n2 :: nil).
apply unique_ers_comp to _ *H14 *H18.
unfold 10. exists (e/do (e/op O V' Ae1 Ce8) Ce3). split.
unfold 11. exists (v\ e/do (e/op O v Ae1 Ce8) Ce3). search.
unfold 10. exists (e/op O V' Ae1 (z\ e/do (Ce8 z) Ce3)). split.
unfold 7. search.
unfold 11. exists (v\ e/op O v Ae1 (z\ e/do (Ce8 z) Ce3)). search.
case H14. case H13. case H15.
% HANDLE V-step
case H2. case H3. apply unique_ers_comp to _ H5 H7.
apply val_preservation to H4 H6 H8.
unfold 11. exists (v\ e/with Ce3 v). search.
% HANDLE V-cast
case H2. case H3. case H6. case H7. case H9.
apply unique_ers_comp to _ H5 H11.
apply unique_ers_val to _ H8 H10.
search.
% HANDLE C-step
case H2. case H3. apply unique_ers_val to _ H7 H9.
Hof: case Hof.
apply IH to _ H5 H6 H8.
unfold 12. exists (c\ e/with c Ve1). search.
% HANDLE t/ret
case H2. case H6. case H7.
apply ers_get_ret_case to H5 H9 H3 H8.
Hof: case Hof.
Hof: case Hof.
apply val_cong_result to Hof.
unfold 10. exists (e/with (e/ret V') (e/hand He)). split.
unfold 11. exists (v\ e/with (e/ret v) (e/hand He)). search.
unfold 10. exists (Ce' V'). split.
unfold 7. search.
unfold 11. exists Ce'. search.
% HANDLE t/ret-t/coer
case H2. case H6. case H8. case H7.
assert {ers_val (t/val_cast V (t/pure_coer Y)) Ve1}.
Hof: case Hof.
Hof: case Hof.
apply val_cong_result to Hof.
apply ers_get_ret_case to H5 H10 H3 H11.
unfold 10. exists (e/with (e/ret V') (e/hand He)). split.
unfold 11. exists (v\ e/with (e/ret v) (e/hand He)). search.
unfold 10. exists (Ce' V'). split.
unfold 7. search.
unfold 11. exists Ce'. search.
% HANDLE op
case H2. case H6. case H7.
Hof: case Hof.
Hof: case Hof.
apply val_cong_result to Hof2.
apply ers_get_op_case to H5 H11 H3 H8 H9 _.
unfold 10. exists (e/with (e/op O V' Ae Ce3) (e/hand He)). split.
unfold 11. exists (v\ e/with (e/op O v Ae Ce3) (e/hand He)). search.
unfold 10. exists (Ce' V' (e/fun Ae (z1\e/with (Ce3 z1) (e/hand He)))). split.
unfold 7. search.
unfold 11. exists (v\ Ce' v (e/fun Ae (z1\e/with (Ce3 z1) (e/hand He)))). search.
